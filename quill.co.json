{
  "site": "https://quill.co/",
  "items": [
    {
      "title": "Fullstack API Platform for Dashboards and Reporting",
      "content": "# Add dashboar|  \nto your app\n\nThe React Library, API, and Management Toolkit, purpose built for customer-facing reporting and dashboards.\n\nThe React Library, API, and Management Toolkit,  \npurpose built for customer-facing reporting and dashboards.\n\n## See \n\n## See \n\nJan 2024 - Jul 2024\n\nLast 90 days\n\n# Transactions\n\n# 56,456\n\n![linechart](/_next/static/media/linechart.3a8da38e.svg)\n\n# Revenue\n\n# $123,456\n\n![barchart](/_next/static/media/barchart.6acfe139.svg)\n\nAmount| Date| Merchant| User| Category  \n---|---|---|---|---  \n$60| 27 May 2024| Chevron| James Newton| Fuel  \n$109| 03 Jun 2024| Chevron| Juan Villareal| Fuel  \n$97| 27 Apr 2024| 76| Benjamin Johannsen| Fuel  \n$65| 21 May 2024| 76| Benjamin Johannsen| Fuel  \n$99| 07 May 2024| Shell| Juan Villareal| Fuel  \n$120| 06 May 2024| Shell| Elizabeth Newton| Fuel  \n\nJan 2024 - Jul 2024\n\nLast 90 days\n\n# Transactions\n\n# 56,456\n\n![linechart](/_next/static/media/linechart.3a8da38e.svg)\n\n# Revenue\n\n# $123,456\n\n![barchart](/_next/static/media/barchart.6acfe139.svg)\n\nAmount| Date| Merchant| User| Category  \n---|---|---|---|---  \n$60| 27 May 2024| Chevron| James Newton| Fuel  \n$109| 03 Jun 2024| Chevron| Juan Villareal| Fuel  \n$97| 27 Apr 2024| 76| Benjamin Johannsen| Fuel  \n$65| 21 May 2024| 76| Benjamin Johannsen| Fuel  \n$99| 07 May 2024| Shell| Juan Villareal| Fuel  \n$120| 06 May 2024| Shell| Elizabeth Newton| Fuel  \n\n![gradient](/_next/static/media/gradient.f3499069.svg)\n\n![Series](/_next/static/media/series.19836a6e.svg)\n\n![Cacheflow](/_next/static/media/cacheflow.732b6b69.svg)\n\n![Middleware](/_next/static/media/middleware.33b3c29f.svg)\n\n![Gigpro](/_next/static/media/gigpro.3cf6e4d2.svg)\n\n![Justpaid](/_next/static/media/justpaid.36add47f.svg)\n\n![Simplify](/_next/static/media/simplify.4a2d4f8d.svg)\n\n![Superpower](/_next/static/media/superpower.5518f41f.svg)\n\n![Hotplate](/_next/static/media/hotplate.096b3b32.svg)\n\n# Modular building blocks for every use case\n\nBuild any reporting workflow, using your own codebase and UI library.\n\nDashboard\n\nReport Detail\n\nAI Reporting\n\nSelf Service\n\nQuery API\n\nInfrastructure\n\nDate\n\nJun 16, 2025 - Sep 14, 2025\n\nLast 90 days\n\ncompared to\n\nPrevious Period\n\nMerchant\n\nSelect\n\nSpend by Merchant\n\nMonthly Transactions\n\nyour-app/pages/dashboard/index.js\n\n    import { Dashboard } from \"@quillsql/react\" \n\n    <Dashboard \n\n       name=\"transactions\" \n\n       onClickReport={report => \n\n          navigateToReportDetail(report.id)\n\n       } \n\n    />\n\n![Series](/_next/static/media/series.19836a6e.svg)\n\n![Cacheflow](/_next/static/media/cacheflow.732b6b69.svg)\n\n![Middleware](/_next/static/media/middleware.33b3c29f.svg)\n\n![Gigpro](/_next/static/media/gigpro.3cf6e4d2.svg)\n\n![Justpaid](/_next/static/media/justpaid.36add47f.svg)\n\n![Simplify](/_next/static/media/simplify.4a2d4f8d.svg)\n\n![Superpower](/_next/static/media/superpower.5518f41f.svg)\n\n![Hotplate](/_next/static/media/hotplate.096b3b32.svg)\n\n[YBacked by Y Combinator](https://www.ycombinator.com/companies/quill)\n\n# How it works\n\n## 1\n\n# Connect your database or create an endpoint\n\nCloudQuill SDK\n\napp.quill.co\n\nConnect database\n\n![Postgres](/_next/static/media/postgres.a4e35b1b.svg)\n\n![Snowflake](/_next/static/media/snowflake.ccdeb78d.svg)\n\n![Redshift](/_next/static/media/redshift.c44d2ddb.svg)\n\n![Bigquery](/_next/static/media/bigquery.3c458eb6.svg)\n\nConnect\n\n## 2\n\n# Create dashboards in Quill\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)![charts](/_next/static/media/charts.ab4b31a8.svg)\n\n## 3\n\n# Add Quill to your app in a few lines of code\n\n    import { QuillProvider, Dashboard } \n\n      from \"@quillsql/react\" \n\n     <QuillProvider> \n\n        <Dashboard name=\"transactions\" /> \n\n     </QuillProvider>\n\napp.acme.co\n\n# 🚀 Acme\n\n![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n## 4\n\n# Push updates without looping in engineers\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)![charts](/_next/static/media/charts.ab4b31a8.svg)\n\n![updatechart](/_next/static/media/singlechart.12e299db.svg)\n\napp.acme.co\n\n# 🚀 Acme\n\n![charts](/_next/static/media/charts.ab4b31a8.svg)\n\n# How it works\n\n## 1\n\n# Connect your database or create an endpoint\n\nCloudQuill SDK\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nConnect database\n\n![Postgres](/_next/static/media/postgres.a4e35b1b.svg)\n\n![Snowflake](/_next/static/media/snowflake.ccdeb78d.svg)\n\n![Redshift](/_next/static/media/redshift.c44d2ddb.svg)\n\n![Bigquery](/_next/static/media/bigquery.3c458eb6.svg)\n\nConnect\n\n## 2\n\n# Create dashboards in Quill\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n## 3\n\n# Add Quill to your app in a few lines of code\n\n    import { QuillProvider, Dashboard } from \"@quillsql/react\" \n\n     <QuillProvider> \n\n        <Dashboard name=\"transactions\" /> \n\n     </QuillProvider>\n\napp.acme.co\n\n# 🚀 Acme\n\n![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n## 4\n\n# Push updates without looping in engineers\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)![charts](/_next/static/media/charts.ab4b31a8.svg)\n\n![updatechart](/_next/static/media/singlechart.12e299db.svg)\n\napp.acme.co\n\n# 🚀 Acme\n\n![charts](/_next/static/media/charts.ab4b31a8.svg)\n\n# One unified platform. Purpose built for serving your customers\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nPortal\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n## Update dashboards without looping in engineers. You can even push reports to specific customers in seconds with multi-tenant access controls.\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nReact Library\n\n<Dashboard />\n\n![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n<Tables />\n\n## Don’t compromise on product. Make dashboards and reporting drive in-product actions. Use your existing UI components and theme, in your own codebase.\n\nYour Cloud\n\nServer\n\n![frameworks](/_next/static/media/serverlang.924a7bdc.png)\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nServer SDK\n\nDatabase\n\n![database](/_next/static/media/db.b573b9b9.svg)\n\n## Sensitive data never leaves your cloud. Use your existing authentication and server. Queries run in your own environment.\n\n# One unified platform. Purpose built for serving your customers\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nPortal\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n## Update dashboards without looping in engineers. You can even push reports to specific customers in seconds with multi-tenant access controls.\n\n![turn](/_next/static/media/turn.63f2c67a.svg)\n\n![turn](/_next/static/media/turn.63f2c67a.svg)\n\n## Don’t compromise on product. Make dashboards and reporting drive in-product actions. Use your existing UI components and theme, in your own codebase.\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nReact Library\n\n<Dashboard />\n\n![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n<Table />\n\n![turn](/_next/static/media/turn.63f2c67a.svg)\n\n![turn](/_next/static/media/turn.63f2c67a.svg)\n\nYour Cloud\n\nServer\n\n![frameworks](/_next/static/media/serverlang.924a7bdc.png)\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nServer SDK\n\nDatabase\n\n![database](/_next/static/media/db.b573b9b9.svg)\n\n## Sensitive data never leaves your cloud. Use your existing authentication and server. Queries run in your own environment.\n\n# Build In-Product Dashboards Quickly, Without Compromise\n\n## Spend your time on your core product, not building dashboards and reporting from scratch.\n\n[\n\n## Book demo\n\n](https://cal.com/quillsql/30min)\n\n[\n\n## See docs\n\n](https://quill.co/docs)\n\n[Docs](https://quill.co/docs)[Jobs](https://www.ycombinator.com/companies/quill/jobs/)[Contact](https://cal.com/quillsql/30min)[Book demo](https://cal.com/quillsql/30min)\n\n[Book demo](https://cal.com/quillsql/30min)\n\n![Quill](/_next/static/media/quillwhite.2b934b4d.svg)\n\n# © Quill Technologies, Inc.\n\n[YBacked by Y Combinator](https://www.ycombinator.com/companies/quill)",
      "content_type": "other",
      "source_url": "https://quill.co/"
    },
    {
      "title": "Architecture - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### Architecture\n\n  * [Architecture](/docs/architecture)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nArchitecture\n\nArchitecture\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nArchitecture\n\n# Architecture\n\nA new BI architecture, purpose built for end user facing, in-product dashboards and reporting.\n\nTraditionally in Business Intelligence products, there are 2 architectures, each with their own set of problems. Architecture| Description| Problems  \n---|---|---  \n **Cloud**|  A web app that you embed via an iframe| Limited customization, security concerns, performance issues  \n **Self-hosted**|  A docker container or kubernetes cluster hosted on your infrastructure| Complex setup, maintenance overhead, still requires iframe embedding  \nBy building backend and frontend logic into your existing stack, we solved these problems.\n\n## \n\n​\n\nHybrid\n\nProduction DB connection runs in your cloud. Metadata requests are made to Quill Metadata API. BI Platform is hosted on our cloud. ![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/quillhybridarchitecture.png)\n\n## \n\n​\n\nSelf Hosted\n\nProduction DB connection and BI Platform run entirely in your cloud. Metadata requests are made to Quill Metadata API. Typical for High Security Industries Like Finance, Healthcare, Government. ![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/quillselfhostedarchitecture.png)\n\n## \n\n​\n\nCloud\n\nDB connection and BI Platform run in our cloud, similar to Other Cloud Developer Products. ![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/quillcloudarchitecture.png)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/quillcloudarchitecture.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/quillhybridarchitecture.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/quillselfhostedarchitecture.png)",
      "content_type": "other",
      "source_url": "https://quill.co/docs"
    },
    {
      "title": "Why Users Want Customer-Facing Analytics",
      "content": "Due to low barriers to entry, abundant capital, and tens of thousands of ambitious founders, the SaaS industry has become one of the most competitive markets in the world. As a result, customers’ expectations have risen dramatically.October 1, 2024",
      "content_type": "blog",
      "source_url": "https://quill.co/blog"
    },
    {
      "title": "Brief Overview of the Modern Data Stack",
      "content": "Ok, but what actually is the Modern Data Stack?September 26, 2024",
      "content_type": "blog",
      "source_url": "https://quill.co/blog"
    },
    {
      "title": "The Evolution of Business Intelligence and the Emergence of Embedded BI",
      "content": "For many SaaS product managers, business intelligence (BI) is a familiar tool that has shaped decision-making and product development for decades. But the rise of embedded BI has introduced new possibilities and challenges, especially in the fast-evolving SaaS ecosystem. In this article, we’ll explore the history of traditional BI, its limitations, and how embedded BI emerged as a product category in the 2000s.July 26, 2024Why the Modern Data Stack Doesn’t Replace Embedded AnalyticsWhile the modern data stack offers robust data capabilities, it also has limitations.July 23, 2024",
      "content_type": "blog",
      "source_url": "https://quill.co/blog"
    },
    {
      "title": "Why SaaS Companies Offer Customer-Facing Analytics",
      "content": "Just like the look & feel of analytics may differ, you’ll hear various explanations for why a specific company wants to offer customer-facing analyticsJuly 12, 2024Don’t build ChatGPT for X. Focus on where ChatGPT doesn’t solve XA lot of AI products are essentially ChatGPT for X, but oftentimes ChatGPT is not the ideal user experience for X. Instead of trying to make a better chatbot than OpenAI, focusing on solving X specifically will often lead to a very different UX (not a chat interface).July 5, 2024What is “customer-facing analytics”?“Customer-facing analytics” describes any data or insights feature in your product that your end-users interact with. Customer-facing analytics are ubiquitous across all kinds of software products, whether consumer, B2B, marketplace, data app, or tech-enabled service. Some common examples of customer-facing analytics are charts & graphs, data tables, dashboards, reporting tools, or even self-service analytics.",
      "content_type": "blog",
      "source_url": "https://quill.co/blog"
    },
    {
      "title": "Architecture - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### Architecture\n\n  * [Architecture](/docs/architecture)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nArchitecture\n\nArchitecture\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nArchitecture\n\n# Architecture\n\nA new BI architecture, purpose built for end user facing, in-product dashboards and reporting.\n\nTraditionally in Business Intelligence products, there are 2 architectures, each with their own set of problems. Architecture| Description| Problems  \n---|---|---  \n **Cloud**|  A web app that you embed via an iframe| Limited customization, security concerns, performance issues  \n **Self-hosted**|  A docker container or kubernetes cluster hosted on your infrastructure| Complex setup, maintenance overhead, still requires iframe embedding  \nBy building backend and frontend logic into your existing stack, we solved these problems.\n\n## \n\n​\n\nHybrid\n\nProduction DB connection runs in your cloud. Metadata requests are made to Quill Metadata API. BI Platform is hosted on our cloud. ![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/quillhybridarchitecture.png)\n\n## \n\n​\n\nSelf Hosted\n\nProduction DB connection and BI Platform run entirely in your cloud. Metadata requests are made to Quill Metadata API. Typical for High Security Industries Like Finance, Healthcare, Government. ![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/quillselfhostedarchitecture.png)\n\n## \n\n​\n\nCloud\n\nDB connection and BI Platform run in our cloud, similar to Other Cloud Developer Products. ![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/quillcloudarchitecture.png)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/quillhybridarchitecture.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/quillselfhostedarchitecture.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/quillcloudarchitecture.png)",
      "content_type": "other",
      "source_url": "https://quill.co/docs/architecture"
    },
    {
      "title": "Overview - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### BI Platform\n\n  * [Overview](/docs/bi-platform/overview)\n  * [Quickstart](/docs/bi-platform/quickstart)\n  * [Create a tenant](/docs/bi-platform/tenant)\n  * [Create a virtual table](/docs/bi-platform/virtual-table)\n  * [Create a dashboard](/docs/bi-platform/dashboard)\n  * [Create a report](/docs/bi-platform/report)\n  * [Self-host the BI Platform](/docs/bi-platform/self-host)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nBI Platform\n\nOverview\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nBI Platform\n\n# Overview\n\nRelevant concepts in Quill BI Platform\n\n## \n\n​\n\n1\\. Environments\n\n### \n\n​\n\nWhat is an Environment?\n\nAn Environment is a single instance of Quill. Each environment has at least one tenant, a virtual schema, and dashboards that belong to it. You can promote changes in one environment to another environment on a report, dashboard, virtual table level.\n\n## \n\n​\n\nCommon Example\n\nA Development and Production environment.\n\n### \n\n​\n\nDevelopment\n\n  * Points to development postgres database\n  * Development Environment publicKey is used in your development and staging react apps\n  * Development Environment privateKey is used in your development and staging server apps\n  * When your server’s schema changes, you can test those changes on the Development Environment\n  * You can promote changes to the Production Environment when they are ready\n\n### \n\n​\n\nProduction\n\n  * Points to production postgres database\n  * Production environment publicKey is used in your development and staging react apps\n  * Production environment privateKey is used in your development and staging server apps\n\n## \n\n​\n\n2\\. Tenant\n\n### \n\n​\n\nWhat is a Tenant?\n\nA tenant is a **logical partition** of data within a datasource.\n\n### \n\n​\n\nTenant Roles\n\n  * **Owner** :\n    * Controls access to data at the **virtual table** level.\n    * Dashboards must only use virtual tables owned by that tenant.\n  * **Viewer** :\n    * Can view dashboards if a **mapping** exists.\n    * The mapping is a **SQL query** that defines which owners a viewer can access.\n\n* * *\n\n## \n\n​\n\n3\\. Virtual Table\n\n### \n\n​\n\nCreating a Virtual Table\n\nTo create a virtual table:\n\n  1. Navigate to the **Virtual Schema** tab.\n  2. Click **Create Table**.\n\n### \n\n​\n\nWhat is a Virtual Table?\n\nA virtual table is:\n\n  * A **SQL query** executed on top of your datasource.\n  * Designed to **enforce tenancy** by requiring a tenant foreign key field \\(called an **owner** \\).\n  * A mechanism for **cleaning and structuring** data for reporting purposes.\n\n> Note: A virtual table can have **multiple owners**.\n\n* * *\n\n## \n\n​\n\n4\\. Dashboard\n\n### \n\n​\n\nWhat is a Dashboard?\n\nA dashboard organizes and presents reports. It includes:\n\n  * **Sections** :\n    * Each section has a name and a list of reports.\n  * **Global Filters** :\n    * Apply across all reports in the dashboard.\n    * Common filters include **date filters** and tenant-level fields.\n\n> A dashboard provides a unified interface to explore tenant-filtered, structured, and visualized data.\n\n* * *\n\n## \n\n​\n\n5\\. Report\n\n### \n\n​\n\nCreating a Report\n\nOnce you have created at least one virtual table, you can create a report.\n\n### \n\n​\n\nWhat is a Report?\n\nA report is a SQL query based on the **virtual schema**. It supports the following views:\n\n  * **Chart view**\n  * **Tabular view** – A formatted output of the SQL query.\n  * **Pivot \\(optional\\)** – Adds grouping and/or aggregation to the result, useful for visualizations.\n\n### \n\n​\n\nReport Features\n\n  * **Access Control** :\n    * Defines which **subset of tenants** can view the report on their dashboards.\n  * **Dashboard Filter Field Mappings** :\n    * Used when a common field appears across multiple tables.\n    * Ensures proper linkage to dashboard-level filters.\n\n### \n\n​\n\nReport Placement\n\n  * A report can be assigned to only **one dashboard**.\n  * It can be placed in only **one section** within that dashboard.\n\n### \n\n​\n\nPromoting a report\n\n  * You can promote a report from one dashboard to another, in the same environment\n\n* * *\n\n## \n\n​\n\nSummary\n\nThe virtual table reporting model consists of:\n\n  1. **Virtual Tables** : SQL-based, tenant-aware cleaned data structures.\n  2. **Reports** : Charted and tabular queries built from virtual tables.\n  3. **Tenants** : Access control units for data partitioning and security.\n  4. **Dashboards** : Grouped reports with global filters and sectioning.\n\nThis structure ensures multi-tenant, clean, and secure reporting across your datasource.\n\n[QuickstartGet up and running with Quill in less than a minuteNext](/docs/bi-platform/quickstart)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)\n\nOn this page\n\n  * 1\\. Environments\n  * What is an Environment?\n  * Common Example\n  * Development\n  * Production\n  * 2\\. Tenant\n  * What is a Tenant?\n  * Tenant Roles\n  * 3\\. Virtual Table\n  * Creating a Virtual Table\n  * What is a Virtual Table?\n  * 4\\. Dashboard\n  * What is a Dashboard?\n  * 5\\. Report\n  * Creating a Report\n  * What is a Report?\n  * Report Features\n  * Report Placement\n  * Promoting a report\n  * Summary",
      "content_type": "other",
      "source_url": "https://quill.co/docs/bi-platform/overview"
    },
    {
      "title": "Quickstart - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### Getting Started\n\n  * [Quickstart](/docs/react/quickstart)\n  * [Custom Themes](/docs/react/themes)\n  * [What is Headless UI?](/docs/react/headless)\n\n##### Use cases\n\n  * [Headless dashboard](/docs/react/headless-dashboard)\n  * [Headless CSV and PDF export](/docs/react/headless-data-export)\n\n##### Components\n\n  * [QuillProvider](/docs/react/quill-provider)\n  * [Dashboard](/docs/react/dashboard)\n  * [ReportBuilder](/docs/react/report-builder)\n  * [Chart](/docs/react/chart)\n  * [StaticChart](/docs/react/static-chart)\n  * [Table](/docs/react/table)\n  * [SQLEditor](/docs/react/sql-editor)\n\n##### Hooks\n\n  * [useDashboard](/docs/react/use-dashboard)\n  * [useDashboardReport](/docs/react/use-dashboard-report)\n  * [useDashboards](/docs/react/use-dashboards)\n  * [useQuill](/docs/react/use-quill)\n  * [useExport](/docs/react/use-export)\n\n##### Functions\n\n  * [format](/docs/react/format)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nGetting Started\n\nQuickstart\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nGetting Started\n\n# Quickstart\n\nAdd Quill to your app in less than a minute\n\n### \n\n​\n\n1\\. Install dependencies\n\nInstall `@quillsql/react` using your favorite package manager:\n\nnpm\n\nyarn\n\npnpm\n\nbun\n\nCopy\n\nAsk AI\n\n    npm install @quillsql/react\n\n### \n\n​\n\n2\\. Add QuillProvider\n\nYou connect Quill to React with the `QuillProvider` component. Similar to React’s `Context.Provider`, `QuillProvider` wraps your React app and places Quill Client on the context, enabling you to access it from anywhere in your component tree. In App.js, let’s wrap our React app with an `QuillProvider`. We suggest putting the `QuillProvider` somewhere high in your app, above any component that might need to access Quill data.\n\nApp.js\n\nCopy\n\nAsk AI\n\n    import { QuillProvider } from \"@quillsql/react\";\n    import MyApp from \"./MyApp\";\n\n    function App() {\n      return (\n        <QuillProvider\n          tenants={[{ tenantField: \"customer_id\", tenantIds: [2] }]}\n          publicKey=\"6579031b3e41c378aa8180ec\"\n        >\n          <MyApp />\n        </QuillProvider>\n      );\n    }\n\n### \n\n​\n\n3\\. Add your first component\n\nAfter your QuillProvider is hooked up, you can add Quill Components to your app. Let’s start with the dashboard we created in the [BI Platform Tutorial](/docs/bi-platform/quickstart).\n\nYou can find the dashboard **name** in the BI Platform at <https://app.quill.co>.\n\nUnderlying queries and charts can be updated via the Quill BI Platform, and the dashboard will render the newest version.\n\nApp.js\n\nCopy\n\nAsk AI\n\n    import { QuillProvider, Dashboard } from \"@quillsql/react\";\n\n    function MyDashboardPage() {\n      return <Dashboard name=\"Transactions\" />;\n    }\n\n[Custom ThemesCustomize your dashboard by passing a custom themeNext](/docs/react/themes)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)\n\nOn this page\n\n  * 1\\. Install dependencies\n  * 2\\. Add QuillProvider\n  * 3\\. Add your first component",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/quickstart"
    },
    {
      "title": "Quickstart - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### Server SDK\n\n  * [Quickstart](/docs/server/quickstart)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nServer SDK\n\nQuickstart\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nServer SDK\n\n# Quickstart\n\nGet up and running with Quill on your own server in 10 minutes\n\n## \n\n​\n\n1\\. Install the Quill SDK\n\nNode.js\n\nPython\n\nGo\n\nPHP\n\nRuby\n\nCopy\n\nAsk AI\n\n    npm install @quillsql/node\n\n## \n\n​\n\n2\\. Create a new endpoint\n\nInstantiate `Quill` with your credentials and add the below `POST` endpoint.\n\nThis example assumes you have an organization id on the user returned by your auth middleware. Queries will not work properly without the organization id.\n\nNode\n\nPython\n\nGo\n\nPHP\n\nRuby\n\nCopy\n\nAsk AI\n\n    import { Quill } from \"@quillsql/node\";\n\n    const quill = new Quill({\n      privateKey: process.env.QULL_PRIVATE_KEY,\n      databaseConnectionString: process.env.POSTGRES_READ,\n      databaseType: \"postgresql\",\n    });\n\n    // \"authenticateJWT\" is your own pre-existing auth middleware\n    app.post(\"/quill\", authenticateJWT, async (req, res) => {\n      // assuming user fetched via auth middleware has an userId\n      const { userId } = req.user;\n      const { metadata } = req.body;\n      const result = await quill.query({\n        tenants: [{ tenantField: \"user_id\", tenantIds: [userId] }]\n        metadata,\n      });\n      res.send(result);\n    });\n\n## \n\n​\n\n3\\. Connect the frontend\n\nYou connect Quill to React with the `QuillProvider` component. Similar to React’s `Context.Provider`, `QuillProvider` wraps your React app and places Quill Client on the context, enabling you to access it from anywhere in your component tree. In App.js, let’s wrap our React app with an `QuillProvider`. We suggest putting the `QuillProvider` somewhere high in your app, above any component that might need to access Quill data.\n\nApp.js\n\nCopy\n\nAsk AI\n\n    import { QuillProvider } from \"@quillsql/react\";\n    import Routes from \"./Routes\";\n    import UserContext from \"./UserContext\";\n\n    function App() {\n      // Use your existing auth and user context\n      const [user] = useContext(UserContext);\n\n      return (\n        <QuillProvider\n          publicKey=\"YOUR_PUBLIC_KEY\"\n          queryEndpoint=\"https://yourserver.com/quill\" // your POST endpoint\n          queryHeaders={{\n            // We'll pass these headers on every request to your endpoint\n            Authorization: `Bearer ${user.jwt}`,\n          }}\n        >\n          <Routes />\n        </QuillProvider>\n      );\n    }\n\nSee the `QuillProvider` [API docs](/docs/components/quill-provider) for more information.\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)\n\nOn this page\n\n  * 1\\. Install the Quill SDK\n  * 2\\. Create a new endpoint\n  * 3\\. Connect the frontend",
      "content_type": "other",
      "source_url": "https://quill.co/docs/server/quickstart"
    },
    {
      "title": "Fullstack API Platform for Dashboards and Reporting",
      "content": "# Add dashboards|  \nto your app\n\nThe React Library, API, and Management Toolkit, purpose built for customer-facing reporting and dashboards.\n\nThe React Library, API, and Management Toolkit,  \npurpose built for customer-facing reporting and dashboards.\n\n## See \n\n## See \n\nJan 2024 - Jul 2024\n\nLast 90 days\n\n# Transactions\n\n# 56,456\n\n![linechart](/_next/static/media/linechart.3a8da38e.svg)\n\n# Revenue\n\n# $123,456\n\n![barchart](/_next/static/media/barchart.6acfe139.svg)\n\nAmount| Date| Merchant| User| Category  \n---|---|---|---|---  \n$60| 27 May 2024| Chevron| James Newton| Fuel  \n$109| 03 Jun 2024| Chevron| Juan Villareal| Fuel  \n$97| 27 Apr 2024| 76| Benjamin Johannsen| Fuel  \n$65| 21 May 2024| 76| Benjamin Johannsen| Fuel  \n$99| 07 May 2024| Shell| Juan Villareal| Fuel  \n$120| 06 May 2024| Shell| Elizabeth Newton| Fuel  \n\nJan 2024 - Jul 2024\n\nLast 90 days\n\n# Transactions\n\n# 56,456\n\n![linechart](/_next/static/media/linechart.3a8da38e.svg)\n\n# Revenue\n\n# $123,456\n\n![barchart](/_next/static/media/barchart.6acfe139.svg)\n\nAmount| Date| Merchant| User| Category  \n---|---|---|---|---  \n$60| 27 May 2024| Chevron| James Newton| Fuel  \n$109| 03 Jun 2024| Chevron| Juan Villareal| Fuel  \n$97| 27 Apr 2024| 76| Benjamin Johannsen| Fuel  \n$65| 21 May 2024| 76| Benjamin Johannsen| Fuel  \n$99| 07 May 2024| Shell| Juan Villareal| Fuel  \n$120| 06 May 2024| Shell| Elizabeth Newton| Fuel  \n\n![gradient](/_next/static/media/gradient.f3499069.svg)\n\n![Series](/_next/static/media/series.19836a6e.svg)\n\n![Cacheflow](/_next/static/media/cacheflow.732b6b69.svg)\n\n![Middleware](/_next/static/media/middleware.33b3c29f.svg)\n\n![Gigpro](/_next/static/media/gigpro.3cf6e4d2.svg)\n\n![Justpaid](/_next/static/media/justpaid.36add47f.svg)\n\n![Simplify](/_next/static/media/simplify.4a2d4f8d.svg)\n\n![Superpower](/_next/static/media/superpower.5518f41f.svg)\n\n![Hotplate](/_next/static/media/hotplate.096b3b32.svg)\n\n# Modular building blocks for every use case\n\nBuild any reporting workflow, using your own codebase and UI library.\n\nDashboard\n\nReport Detail\n\nAI Reporting\n\nSelf Service\n\nQuery API\n\nInfrastructure\n\nDate\n\nJun 16, 2025 - Sep 14, 2025\n\nLast 90 days\n\ncompared to\n\nPrevious Period\n\nMerchant\n\nSelect\n\nSpend by Merchant\n\nMonthly Transactions\n\nyour-app/pages/dashboard/index.js\n\n    import { Dashboard } from \"@quillsql/react\" \n\n    <Dashboard \n\n       name=\"transactions\" \n\n       onClickReport={report => \n\n          navigateToReportDetail(report.id)\n\n       } \n\n    />\n\n![Series](/_next/static/media/series.19836a6e.svg)\n\n![Cacheflow](/_next/static/media/cacheflow.732b6b69.svg)\n\n![Middleware](/_next/static/media/middleware.33b3c29f.svg)\n\n![Gigpro](/_next/static/media/gigpro.3cf6e4d2.svg)\n\n![Justpaid](/_next/static/media/justpaid.36add47f.svg)\n\n![Simplify](/_next/static/media/simplify.4a2d4f8d.svg)\n\n![Superpower](/_next/static/media/superpower.5518f41f.svg)\n\n![Hotplate](/_next/static/media/hotplate.096b3b32.svg)\n\n[YBacked by Y Combinator](https://www.ycombinator.com/companies/quill)\n\n# How it works\n\n## 1\n\n# Connect your database or create an endpoint\n\nCloudQuill SDK\n\napp.quill.co\n\nConnect database\n\n![Postgres](/_next/static/media/postgres.a4e35b1b.svg)\n\n![Snowflake](/_next/static/media/snowflake.ccdeb78d.svg)\n\n![Redshift](/_next/static/media/redshift.c44d2ddb.svg)\n\n![Bigquery](/_next/static/media/bigquery.3c458eb6.svg)\n\nConnect\n\n## 2\n\n# Create dashboards in Quill\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)![charts](/_next/static/media/charts.ab4b31a8.svg)\n\n## 3\n\n# Add Quill to your app in a few lines of code\n\n    import { QuillProvider, Dashboard } \n\n      from \"@quillsql/react\" \n\n     <QuillProvider> \n\n        <Dashboard name=\"transactions\" /> \n\n     </QuillProvider>\n\napp.acme.co\n\n# 🚀 Acme\n\n![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n## 4\n\n# Push updates without looping in engineers\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)![charts](/_next/static/media/charts.ab4b31a8.svg)\n\n![updatechart](/_next/static/media/singlechart.12e299db.svg)\n\napp.acme.co\n\n# 🚀 Acme\n\n![charts](/_next/static/media/charts.ab4b31a8.svg)\n\n# How it works\n\n## 1\n\n# Connect your database or create an endpoint\n\nCloudQuill SDK\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nConnect database\n\n![Postgres](/_next/static/media/postgres.a4e35b1b.svg)\n\n![Snowflake](/_next/static/media/snowflake.ccdeb78d.svg)\n\n![Redshift](/_next/static/media/redshift.c44d2ddb.svg)\n\n![Bigquery](/_next/static/media/bigquery.3c458eb6.svg)\n\nConnect\n\n## 2\n\n# Create dashboards in Quill\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n## 3\n\n# Add Quill to your app in a few lines of code\n\n    import { QuillProvider, Dashboard } from \"@quillsql/react\" \n\n     <QuillProvider> \n\n        <Dashboard name=\"transactions\" /> \n\n     </QuillProvider>\n\napp.acme.co\n\n# 🚀 Acme\n\n![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n## 4\n\n# Push updates without looping in engineers\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)![charts](/_next/static/media/charts.ab4b31a8.svg)\n\n![updatechart](/_next/static/media/singlechart.12e299db.svg)\n\napp.acme.co\n\n# 🚀 Acme\n\n![charts](/_next/static/media/charts.ab4b31a8.svg)\n\n# One unified platform. Purpose built for serving your customers\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nPortal\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n## Update dashboards without looping in engineers. You can even push reports to specific customers in seconds with multi-tenant access controls.\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nReact Library\n\n<Dashboard />\n\n![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n<Tables />\n\n## Don’t compromise on product. Make dashboards and reporting drive in-product actions. Use your existing UI components and theme, in your own codebase.\n\nYour Cloud\n\nServer\n\n![frameworks](/_next/static/media/serverlang.924a7bdc.png)\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nServer SDK\n\nDatabase\n\n![database](/_next/static/media/db.b573b9b9.svg)\n\n## Sensitive data never leaves your cloud. Use your existing authentication and server. Queries run in your own environment.\n\n# One unified platform. Purpose built for serving your customers\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nPortal\n\napp.quill.co\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n## Update dashboards without looping in engineers. You can even push reports to specific customers in seconds with multi-tenant access controls.\n\n![turn](/_next/static/media/turn.63f2c67a.svg)\n\n![turn](/_next/static/media/turn.63f2c67a.svg)\n\n## Don’t compromise on product. Make dashboards and reporting drive in-product actions. Use your existing UI components and theme, in your own codebase.\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nReact Library\n\n<Dashboard />\n\n![charts](/_next/static/media/chartsmissing.f5a34f6e.svg)\n\n<Table />\n\n![turn](/_next/static/media/turn.63f2c67a.svg)\n\n![turn](/_next/static/media/turn.63f2c67a.svg)\n\nYour Cloud\n\nServer\n\n![frameworks](/_next/static/media/serverlang.924a7bdc.png)\n\n![Quill](/_next/static/media/quill.7847c2f3.svg)\n\nServer SDK\n\nDatabase\n\n![database](/_next/static/media/db.b573b9b9.svg)\n\n## Sensitive data never leaves your cloud. Use your existing authentication and server. Queries run in your own environment.\n\n# Build In-Product Dashboards Quickly, Without Compromise\n\n## Spend your time on your core product, not building dashboards and reporting from scratch.\n\n[\n\n## Book demo\n\n](https://cal.com/quillsql/30min)\n\n[\n\n## See docs\n\n](https://quill.co/docs)\n\n[Docs](https://quill.co/docs)[Jobs](https://www.ycombinator.com/companies/quill/jobs/)[Contact](https://cal.com/quillsql/30min)[Book demo](https://cal.com/quillsql/30min)\n\n[Book demo](https://cal.com/quillsql/30min)\n\n![Quill](/_next/static/media/quillwhite.2b934b4d.svg)\n\n# © Quill Technologies, Inc.\n\n[YBacked by Y Combinator](https://www.ycombinator.com/companies/quill)",
      "content_type": "other",
      "source_url": "https://quill.co"
    },
    {
      "title": "Quickstart - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### BI Platform\n\n  * [Overview](/docs/bi-platform/overview)\n  * [Quickstart](/docs/bi-platform/quickstart)\n  * [Create a tenant](/docs/bi-platform/tenant)\n  * [Create a virtual table](/docs/bi-platform/virtual-table)\n  * [Create a dashboard](/docs/bi-platform/dashboard)\n  * [Create a report](/docs/bi-platform/report)\n  * [Self-host the BI Platform](/docs/bi-platform/self-host)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nBI Platform\n\nQuickstart\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nBI Platform\n\n# Quickstart\n\nGet up and running with Quill in less than a minute\n\n### \n\n​\n\n1\\. Create a read-only user\n\n  * PostgreSQL\n  * Big Query\n  * Snowflake\n  * MySQL\n\nTo create a read-only user in PostgreSQL, do the following:\n\n1\n\nCreate a new user\n\nPostgreSQL\n\nCopy\n\nAsk AI\n\n    -- Replace 'password' with a strong password.\n    CREATE USER quill_read_only WITH PASSWORD 'password';\n\n2\n\nGrant CONNECT privileges\n\nPostgreSQL\n\nCopy\n\nAsk AI\n\n    -- Allows the user to connect to the database.\n    GRANT CONNECT ON DATABASE your_database TO quill_read_only;\n\n3\n\nGrant USAGE on the schema\n\nPostgreSQL\n\nCopy\n\nAsk AI\n\n    -- Allows the user to access the objects within the schema.\n    GRANT USAGE ON SCHEMA your_schema TO quill_read_only;\n\n4\n\nGrant SELECT privileges on the schema\n\nPostgreSQL\n\nCopy\n\nAsk AI\n\n    -- Allows the user to read data from the tables.\n    GRANT SELECT ON ALL TABLES IN SCHEMA your_schema TO quill_read_only;\n\nThe connection string for the read-only user we just created will be something like: `postgresql://quill_read_only:password@db.example.com:5432/your_database`.\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/onboard_1_pg.png)\n\n### \n\n​\n\n2\\. Connect your database\n\nGo to <https://app.quill.co/onboard> and enter the read-only database connection string that we created in the last step.\n\nIf you’re using our fully-managed Quill instance, make sure to add the Quill server to your database IP whitelist, if you have one. Requests from Quill will always come from `34.133.137.225`.\n\nFor more information about data and access control, you can read our self-hosting guide [here](/docs/selfhost/quickstart.mdx).\n\n### \n\n​\n\n3\\. Connect your schema\n\nThe Quill platform provides powerful filtering and reporting tools to help you get the insights you want, faster. Since Quill provides organization-based filtering out-of-the-box, simply let us know which table to use and Quill will automatically partition your data by organization. ![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/onboard_2.png)\n\n### \n\n​\n\n4\\. Add SQL Views\n\nCreate a cleaned schema that makes it easier to write queries and reports. The views you create here will be used to create charts and tables later on. Don’t worry, you can always create and edit these views later. ![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/onboard_3.png)\n\n### \n\n​\n\nNext Steps\n\nOnce you have connected your database, you’re ready to create your first dashboard\\! Check out our guides on how to create your first dashboard below. [\n\n## Create a dashboard\n\nBuild your first dashboard with Quill in less than a minute.](/docs/bi-platform/dashboard)\n\n[Previous](/docs/bi-platform/overview)[Create a tenantCreate objects that own dashboards and can view dashboards owned by other tenantsNext](/docs/bi-platform/tenant)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)\n\nOn this page\n\n  * 1\\. Create a read-only user\n  * 2\\. Connect your database\n  * 3\\. Connect your schema\n  * 4\\. Add SQL Views\n  * Next Steps\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/onboard_1_pg.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/onboard_2.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/onboard_3.png)",
      "content_type": "other",
      "source_url": "https://quill.co/docs/bi-platform/quickstart"
    },
    {
      "title": "Create a tenant - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### BI Platform\n\n  * [Overview](/docs/bi-platform/overview)\n  * [Quickstart](/docs/bi-platform/quickstart)\n  * [Create a tenant](/docs/bi-platform/tenant)\n  * [Create a virtual table](/docs/bi-platform/virtual-table)\n  * [Create a dashboard](/docs/bi-platform/dashboard)\n  * [Create a report](/docs/bi-platform/report)\n  * [Self-host the BI Platform](/docs/bi-platform/self-host)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nBI Platform\n\nCreate a tenant\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nBI Platform\n\n# Create a tenant\n\nCreate objects that own dashboards and can view dashboards owned by other tenants\n\nTenants do two things in the Quill platform. 1. separate data in a dashboard 2. allow certain organizations, users, etc to see specific reports in a dashboard. To learn more about tenancy read more [here](/docs/bi-platform/overview).\n\nTenants are the core concept for multi-tenancy in Quill. Each tenant represents a separate organization, user, etc.\n\n### \n\n​\n\nTenant Configuration\n\n#### \n\n​\n\n1\\. Name\n\nMost commonly the business name. Example: “organization”\n\n#### \n\n​\n\n2\\. Division\n\n  * **Row** \\(most common\\) - Each organization will have its own rows in a table via foreign key, `organization_id`\n  * **Schema** \\- Each organization has its own schema\n  * **Database** \\- Each organization has its own database instance\n\n#### \n\n​\n\n3\\. Roles\n\n  * **Owner** \\- Owner is how dashboard data is divided\n  * **Viewer** \\- Viewer can see some list of dashboards\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/create_tenant.png)\n\n[Previous](/docs/bi-platform/quickstart)[Create a virtual tableAdd a virtual table to Quill virtual schemaNext](/docs/bi-platform/virtual-table)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)\n\nOn this page\n\n  * Tenant Configuration\n  * 1\\. Name\n  * 2\\. Division\n  * 3\\. Roles\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/create_tenant.png)",
      "content_type": "other",
      "source_url": "https://quill.co/docs/bi-platform/tenant"
    },
    {
      "title": "Create a virtual table - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### BI Platform\n\n  * [Overview](/docs/bi-platform/overview)\n  * [Quickstart](/docs/bi-platform/quickstart)\n  * [Create a tenant](/docs/bi-platform/tenant)\n  * [Create a virtual table](/docs/bi-platform/virtual-table)\n  * [Create a dashboard](/docs/bi-platform/dashboard)\n  * [Create a report](/docs/bi-platform/report)\n  * [Self-host the BI Platform](/docs/bi-platform/self-host)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nBI Platform\n\nCreate a virtual table\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nBI Platform\n\n# Create a virtual table\n\nAdd a virtual table to Quill virtual schema\n\nThis guide assumes you have already connected your database with Quill. If you haven’t done that yet, check out our onboarding guide [here](/docs/bi-platform/quickstart).\n\nWhen you first get started with the Quill platform, you only see the initial views you created in the onboarding flow.\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/views.png)\n\n### \n\n​\n\n1\\. Create a virtual table\n\nTo add a new SQL virtual table, you can click `Add virtual table +` to open a SQL Editor that shows the visible tables that Quill can see in your schema.\n\nSQL virtual tables can help you organize and group different data together to make it easier to build charts and tables on top of.\n\n### \n\n​\n\n2\\. Edit the virtual table and save\n\nGo ahead and write some SQL for a new virtual table that you would like to create. Run the query by clicking `Run Query` and make sure the data looks correct.\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/create_sql_view.png)\n\nGive your new virtual table a descriptive, clear name and then hit `Create virtual table` to add the virtual table to Quill. You can now query data from that virtual table in charts and dashboards.\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/add_view.png)\n\n### \n\n​\n\n3\\. Manage your virtual tables\n\nIf you ever want to edit or delete an existing virtual table, click on the virtual table in the SQL virtual tables list to open the virtual table manager.\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/edit_view.png)\n\nBe careful when editing and deleting virtual tables\\! Make sure the charts that reference that virtual table are up to date so they don’t get out of sync.\n\n### \n\n​\n\nNext Steps\n\nNow that you have a virtual table, you’re ready to start using Quill\\! You can come back at any time and add more dashboards, reports, and virtual tables.\n\n[\n\n## Create a dashboard\n\n](/docs/bi-platform/dashboard)[\n\n## Create a report\n\n](/docs/bi-platform/report)[\n\n## Create a virtual table\n\n](/docs/bi-platform/virtual-table)\n\n[Previous](/docs/bi-platform/tenant)[Create a dashboardBuild your first dashboard with Quill in less than a minuteNext](/docs/bi-platform/dashboard)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)\n\nOn this page\n\n  * 1\\. Create a virtual table\n  * 2\\. Edit the virtual table and save\n  * 3\\. Manage your virtual tables\n  * Next Steps\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/views.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/create_sql_view.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/edit_view.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/add_view.png)",
      "content_type": "other",
      "source_url": "https://quill.co/docs/bi-platform/virtual-table"
    },
    {
      "title": "Create a report - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### BI Platform\n\n  * [Overview](/docs/bi-platform/overview)\n  * [Quickstart](/docs/bi-platform/quickstart)\n  * [Create a tenant](/docs/bi-platform/tenant)\n  * [Create a virtual table](/docs/bi-platform/virtual-table)\n  * [Create a dashboard](/docs/bi-platform/dashboard)\n  * [Create a report](/docs/bi-platform/report)\n  * [Self-host the BI Platform](/docs/bi-platform/self-host)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nBI Platform\n\nCreate a report\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nBI Platform\n\n# Create a report\n\nBuild your first report with Quill in less than a minute\n\nThis guide assumes you have already created a dashboard. If you haven’t done that yet, check out our guide on how to create your first dashboard [here](/docs/bi-platform/dashboard).\n\nThere are two ways to create a report with Quill, with SQL or without SQL.\n\n[\n\n## With SQL \\(SQLEditor\\)\n\nCreate a report with SQL](/docs/bi-platform/report#with-sql-sqleditor)[\n\n## No Code \\(ReportBuilder\\)\n\nCreate a report from a user interface](/docs/bi-platform/report#no-code-reportbuilder)\n\n## \n\n​\n\nWith SQL \\(SQLEditor\\)\n\nThe SQL Editor is a powerful SQL-based code editor that you can use in your product to help your users create and edit their own reports.\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/sql_editor.png)\n\n### \n\n​\n\n1\\. Enter a query or ask AI\n\nUse the code editor to enter a SQL query. Alternatively, you can also use the text box to ask AI to write a SQL query for you using your available schemas. When you’re finished with your query, click `Run Query` to execute that query against your database.\n\n### \n\n​\n\n2\\. Edit your query\n\nTake a look at the response table to make sure the data was what you expected. If it isn’t, you can either manually update the SQL query using the code editor or you can use the text box again to have the AI fix the query. If the query didn’t work at all, you can also have the AI automatically fix the broken query by clicking `Fix with AI`:\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/fix_query.png)\n\n### \n\n​\n\n3\\. Edit the chart\n\nOnce you are satisfied with your query and the query results, click `Add to dashboard` in the bottom right to turn the query into a report.\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/edit_chart.png)\n\nHere, you can edit the name of the chart, the dashboard this chart should belong to, the chart type, and much more.\n\nFor a more detailed guide for each of each option, see Editing a Chart below.\n\n## \n\n​\n\nNo Code \\(ReportBuilder\\)\n\nThe Report Builder is an easy-to-use, AI-enabled query creation tool that you can use in your product to allow nontechnical users to create and edit their own reports without knowing SQL.\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/report_builder.png)\n\n### \n\n​\n\n1\\. Create a report or ask AI\n\nTo create a report using the ReportBuilder, you can either ask AI to generate a report for you or use the interface on the left sidebar to select columns.\n\n### \n\n​\n\n2\\. Edit the report\n\nOnce you have a report that is populated with data, you can edit the report using AI or the left sidebar. To apply a filter, simply select the column you wish to filter against and then how you would like to filter \\(the options change based on the type of the column\\). To apply one- or two-dimensional groupings or aggregations you can add a pivot which will orient your data based on the columns and aggregation type you select. You can sort the data in the report by one or more columns using the sort feature and you can limit the number of rows returned in the report using the limit feature.\n\n### \n\n​\n\n3\\. Edit the report\n\nOnce you are satisfied with your query and the query results, click `Add to dashboard` in the bottom right to turn the query into a report.\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/edit_chart_2.png)\n\nHere, you can edit the name of the chart, the dashboard this chart should belong to, the chart type, and much more.\n\nFor a more detailed guide for each of each option, see Editing a Report below.\n\n## \n\n​\n\nEditing a Report\n\nOnce you have created a query, you can edit the resulting chart before adding it to your dashboard. You can edit the name of the chart, the dashboard this chart should belong to, the chart type, and much more. When used in an embedded flow where the dashboard is known ahead of time, developers can pre-select this dashboard and the option will be hidden in this form.\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/edit_chart_3.png)\n\n### \n\n​\n\nPivots\n\nEditing queries with SQL gives you fine-grain control over your data, but you can also add a pivot to the result of the query to apply extra groupings or breakdowns to get exactly the information you want.\n\n### \n\n​\n\nChart Axis\n\nYou can update the axis information for each chart by selecting which columns to use for each axis, what labels to give those columns \\(defaults to the name of the column\\), and the formatting type that should be applied to values for that axis.\n\n### \n\n​\n\nTable Info\n\nIn Quill, every chart is backed by a SQL query. The results of that query are represented as a table which can be useful for reporting or sharing with other teams. Similar to the chart axis you can change the columns, labels, and formatting applied to this table.\n\n### \n\n​\n\nDate Field\n\nFor dashboards with date filters, you can select which date field to use for this query. This column will be used when filtering all charts on that dashboard by a common date filter automatically.\n\n### \n\n​\n\nOrganization Access\n\nBy default, this chart will only be visible for your current organization \\(in this case, “Acme”\\) but you can make this chart visible to all organizations by toggling the organization access toggle. This option can also be disabled.\n\n## \n\n​\n\nNext Steps\n\nWith chart and a dashboard, you’re ready to start using Quill. If you’d like, you can also add a new virtual table to give Quill access to even more data for making reports\\! [\n\n## Create a virtual table\n\nAdd a SQL view with Quill in less than a minute.](/docs/bi-platform/virtual-table)\n\n[Previous](/docs/bi-platform/dashboard)[Self-host the BI PlatformSet up the BI Platform in your own react appNext](/docs/bi-platform/self-host)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)\n\nOn this page\n\n  * With SQL \\(SQLEditor\\)\n  * 1\\. Enter a query or ask AI\n  * 2\\. Edit your query\n  * 3\\. Edit the chart\n  * No Code \\(ReportBuilder\\)\n  * 1\\. Create a report or ask AI\n  * 2\\. Edit the report\n  * 3\\. Edit the report\n  * Editing a Report\n  * Pivots\n  * Chart Axis\n  * Table Info\n  * Date Field\n  * Organization Access\n  * Next Steps\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/sql_editor.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/fix_query.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/edit_chart.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/edit_chart_2.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/report_builder.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/edit_chart_3.png)",
      "content_type": "other",
      "source_url": "https://quill.co/docs/bi-platform/report"
    },
    {
      "title": "Self-host the BI Platform - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### BI Platform\n\n  * [Overview](/docs/bi-platform/overview)\n  * [Quickstart](/docs/bi-platform/quickstart)\n  * [Create a tenant](/docs/bi-platform/tenant)\n  * [Create a virtual table](/docs/bi-platform/virtual-table)\n  * [Create a dashboard](/docs/bi-platform/dashboard)\n  * [Create a report](/docs/bi-platform/report)\n  * [Self-host the BI Platform](/docs/bi-platform/self-host)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nBI Platform\n\nSelf-host the BI Platform\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nBI Platform\n\n# Self-host the BI Platform\n\nSet up the BI Platform in your own react app\n\nIf you want the BI Platform to point to a datasource via the server sdk \\(instead of Quill Cloud\\), you can add it to any react app in a few lines of code.\n\n### \n\n​\n\n1\\. Install dependencies\n\nInstall `@quillsql/admin` using your favorite package manager:\n\nnpm\n\nyarn\n\npnpm\n\nbun\n\nCopy\n\nAsk AI\n\n    npm install @quillsql/admin\n\n### \n\n​\n\n2\\. Add AdminProvider\n\nYou connect Quill to React with the `AdminProvider` component. Similar to React’s `Context.Provider`, `AdminProvider` wraps your React app and places Quill on the context, enabling you to access it from anywhere in your component tree. In App.js, let’s wrap our React app with an `AdminProvider`. We suggest putting the `AdminProvider` somewhere high in your app, above any component that might use to access BI Platform components. If you’re using `QuillProvider` in the same react app, make sure it is a child of `AdminProvider`.\n\nApp.js\n\nCopy\n\nAsk AI\n\n    import { AdminProvider } from \"@quillsql/admin\";\n    import { QuillProvider } from \"@quillsql/react\";\n    import MyApp from \"./MyApp\";\n\n    function App() {\n      return (\n        <AdminProvider\n          queryEndpoint=\"api.youserver.com/quill\"\n          publicKey=\"QUILL_PUBLIC_KEY\"\n        >\n          <QuillProvider\n            queryEndpoint=\"api.youserver.com/quill\"\n            publicKey=\"QUILL_PUBLIC_KEY\"\n          >\n            <MyApp />\n          </QuillProvider>\n        </AdminProvider>\n      );\n    }\n\nThe add two routes in your app, one for each page of the BI Platform. Use your existing navigation system, but here is an example using react router.\n\nApp.js\n\nCopy\n\nAsk AI\n\n    import {\n      AdminProvider,\n      VirtualTableManager,\n      DashboardManager,\n    } from \"@quillsql/admin\";\n    import { QuillProvider } from \"@quillsql/react\";\n    import {\n      BrowserRouter,\n      Routes,\n      Route,\n      Link,\n      useNavigate,\n    } from \"react-router-dom\";\n\n    function App() {\n      return (\n        <AdminProvider\n          queryEndpoint=\"api.youserver.com/quill\"\n          publicKey=\"QUILL_PUBLIC_KEY\"\n        >\n          <BrowserRouter>\n            <AppContent />\n          </BrowserRouter>\n        </AdminProvider>\n      );\n    }\n\n    function AppContent() {\n      const navigate = useNavigate();\n\n      return (\n        <div>\n          <nav>\n            <Link to=\"/dashboards\">Dashboard Manager</Link>\n            <Link to=\"/virtual-tables\">Virtual Table Manager</Link>\n          </nav>\n\n          <Routes>\n            <Route\n              path=\"/dashboards\"\n              element={\n                <DashboardManager\n                  navigateToVirtualTableManager={() => navigate(\"/virtual-tables\")}\n                />\n              }\n            />\n            <Route\n              path=\"/virtual-tables\"\n              element={\n                <VirtualTableManager\n                  navigateToDashboardManager={() => navigate(\"/dashboards\")}\n                />\n              }\n            />\n          </Routes>\n        </div>\n      );\n    }\n\n[PreviousCreate a reportBuild your first report with Quill in less than a minute](/docs/bi-platform/report)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)\n\nOn this page\n\n  * 1\\. Install dependencies\n  * 2\\. Add AdminProvider",
      "content_type": "other",
      "source_url": "https://quill.co/docs/bi-platform/self-host"
    },
    {
      "title": "Custom Themes - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### Getting Started\n\n  * [Quickstart](/docs/react/quickstart)\n  * [Custom Themes](/docs/react/themes)\n  * [What is Headless UI?](/docs/react/headless)\n\n##### Use cases\n\n  * [Headless dashboard](/docs/react/headless-dashboard)\n  * [Headless CSV and PDF export](/docs/react/headless-data-export)\n\n##### Components\n\n  * [QuillProvider](/docs/react/quill-provider)\n  * [Dashboard](/docs/react/dashboard)\n  * [ReportBuilder](/docs/react/report-builder)\n  * [Chart](/docs/react/chart)\n  * [StaticChart](/docs/react/static-chart)\n  * [Table](/docs/react/table)\n  * [SQLEditor](/docs/react/sql-editor)\n\n##### Hooks\n\n  * [useDashboard](/docs/react/use-dashboard)\n  * [useDashboardReport](/docs/react/use-dashboard-report)\n  * [useDashboards](/docs/react/use-dashboards)\n  * [useQuill](/docs/react/use-quill)\n  * [useExport](/docs/react/use-export)\n\n##### Functions\n\n  * [format](/docs/react/format)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nGetting Started\n\nCustom Themes\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nGetting Started\n\n# Custom Themes\n\nCustomize your dashboard by passing a custom theme\n\nFor pixel-perfect control over theming and styling, all Quill components accept custom components as props. See our [dashboard docs](/docs/components/dashboard.mdx) for an example.\n\nApp.tsx\n\nCopy\n\nAsk AI\n\n    import { QuillProvider } from \"@quillsql/react\";\n\n    // You can a custom theme to be applied to the default Quill\n    // components, or you can pass your own components with\n    // pixel-perfect styling.\n    const MY_CUSTOM_THEME = {\n    \tfontFamily: \"Inter; Helvetica\",\n    \tbackgroundColor: \"#FFFFFF\",\n    \tprimaryTextColor: \"#364153\",\n    \tsecondaryTextColor: \"#6C727F\",\n    \tchartLabelFontFamily: \"Inter; Helvetica\",\n    \tchartLabelColor: \"#666666\",\n    \tchartTickColor: \"#CCCCCC\",\n    \tchartColors: [\"#4E80EE\", \"#E14F62\", \"#55B5A6\", \"#E9A23B\"],\n    \tborderColor: \"#E5E7EB\",\n    \tprimaryButtonColor: \"#364153\",\n    \tsecondaryButtonColor: \"#384151\",\n    \tborderWidth: 1,\n    \tlabelFontWeight: 500,\n    \tfontSize: 14,\n    \tloadingStateBackgroundColor: \"#F9F9FA\",\n    \thoverBackgroundColor: \"#F4F4F5\",\n    };\n\n    function App() {\n    \treturn (\n    \t\t<QuillProvider\n    \t\t\tpublicKey={process.env.QUILL_API_KEY}\n    \t\t\torganizationId={user.organizationId}\n    \t\t\ttheme={MY_CUSTOM_THEME}>\n    \t\t\t{children}\n    \t\t</QuillProvider>\n    \t);\n    }\n\n## \n\n​\n\nQuillTheme\n\n​\n\nfontFamily\n\nstring\n\nrequired\n\nThe font family you want Quill to use. This is usually the same font your app uses. ex: “Inter”\n\n​\n\nfontSize\n\nnumber\n\nrequired\n\nThe default font size you want Quill to use. This is usually the same as the fontSize of your app \\(eg. 16 for “16px”\\).\n\n​\n\nbackgroundColor\n\nstring\n\nrequired\n\nThe background color you want Quill to use. This is usually the same background color your app uses. ex: “\\#FFFFFF”\n\n​\n\nhoverBackgroundColor\n\nstring\n\nrequired\n\nThe background color you want Quill to use while hovering.\n\n​\n\nprimaryTextColor\n\nstring\n\nrequired\n\nThe color you want Quill to use for primary text. This is usually the same primary text color color your app uses. ex: “\\#000000”\n\n​\n\nsecondaryTextColor\n\nstring\n\nrequired\n\nThe text color you want Quill to use for secondary text. This is usually the same secondary font color your app uses. ex: “\\#888888”\n\n​\n\nchartLabelFontFamily\n\nstring\n\nrequired\n\nThe font family you want Quill to use for chart labels. This is usually the same as your base font family. ex: “Inter”\n\n​\n\nchartLabelColor\n\nstring\n\nrequired\n\nThe text color you want Quill to use for chart labels. This is usually the same as or similar to the secondary color your app uses. ex: “\\#666666”\n\n​\n\nchartTickColor\n\nstring\n\nrequired\n\nThe color you want Quill to use for chart ticks. This is usually the same as or similar to the secondary color your app uses. ex: “\\#CCCCCC”\n\n​\n\nchartColors\n\nstring\\[\\]\n\nrequired\n\nThe chart colors you want Quill to use. This is usually the same as the primary and secondary colors your app uses. You can pass in as many colors as you want, and you can also override these by passing in an array for the colors prop in the Chart component. ex: \\[‘\\#6269E9’, ‘\\#E14F62’\\]\n\n​\n\nborderColor\n\nstring\n\nrequired\n\nThe border color you want Quill to use. This is usually the same as or similar to the border color your app uses. ex: “\\#CCCCCC”\n\n​\n\nborderWidth\n\nnumber\n\nrequired\n\nThe border width you want Quill to use. This is usually the same as or similar to the border width your app uses. ex: 1 \\(ie. “1px”\\)\n\n​\n\nprimaryButtonColor\n\nstring\n\nThe color of the primary buttons you want Quill to use. Typically, you can just pass in a custom button with the styling you want instead of using this.\n\n​\n\nsecondaryButtonColor\n\nstring\n\nThe color of the secondary buttons you want Quill to use. Typically, you can just pass in a custom button with the styling you want instead of using this.\n\n​\n\nbuttonFontWeight\n\nnumber\n\nThe font weight you want Quill to use for buttons. Typically, you can just pass in a custom button with the styling you want instead of using this. \\(eg. 600\\)\n\n​\n\nlabelFontWeight\n\nnumber\n\nThe font weight you want Quill to use for labels. Typically, you can just pass in a custom label component with the styling you want instead of using this. \\(eg. 400\\)\n\n​\n\nloadingStateBackgroundColor\n\nstring\n\nThe background color you want Quill to use while in a loading state. This is usually the same as the background color you app uses \\(eg. ‘\\#FFFFFF’\\).\n\n[Previous](/docs/react/quickstart)[What is Headless UI?Next](/docs/react/headless)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/themes"
    },
    {
      "title": "What is Headless UI? - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### Getting Started\n\n  * [Quickstart](/docs/react/quickstart)\n  * [Custom Themes](/docs/react/themes)\n  * [What is Headless UI?](/docs/react/headless)\n\n##### Use cases\n\n  * [Headless dashboard](/docs/react/headless-dashboard)\n  * [Headless CSV and PDF export](/docs/react/headless-data-export)\n\n##### Components\n\n  * [QuillProvider](/docs/react/quill-provider)\n  * [Dashboard](/docs/react/dashboard)\n  * [ReportBuilder](/docs/react/report-builder)\n  * [Chart](/docs/react/chart)\n  * [StaticChart](/docs/react/static-chart)\n  * [Table](/docs/react/table)\n  * [SQLEditor](/docs/react/sql-editor)\n\n##### Hooks\n\n  * [useDashboard](/docs/react/use-dashboard)\n  * [useDashboardReport](/docs/react/use-dashboard-report)\n  * [useDashboards](/docs/react/use-dashboards)\n  * [useQuill](/docs/react/use-quill)\n  * [useExport](/docs/react/use-export)\n\n##### Functions\n\n  * [format](/docs/react/format)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nGetting Started\n\nWhat is Headless UI?\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nGetting Started\n\n# What is Headless UI?\n\n“Headless” in React refers to a design pattern where UI components are separated into two parts:\n\n  1. **Logic/State Management** \\- The “headless” part that handles all the business logic, state, and behavior\n  2. **UI/Presentation** \\- The visual components that you style and customize\n\n## \n\n​\n\nHow Headless Components Work\n\nHeadless components provide all the functionality without any default styling or visual elements. They give you:\n\n  * Data processing\n  * State management\n  * Business logic\n\nBut leave the UI completely up to you.\n\n> The hardest parts of building complex UIs usually revolve around state, events, side-effects, data computation/management. By removing these concerns from the markup, styles and implementation details, our logic and components can be more modular and reusable.\n\n— [**TanStack**](https://tanstack.com/table/v8/docs/introduction) ![Quill Architecture](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/quillarchitecture.png)\n\n## \n\n​\n\nPopular Libraries that leverage React Hooks\n\n  * [TanStack Table \\(useReactTable\\)](https://tanstack.com/table/latest)\n  * [TanStack Query \\(useQuery\\)](https://tanstack.com/query/latest)\n  * [Clerk React SDK \\(useUser\\)](https://clerk.com/docs/hooks/use-user)\n  * [React Hook Form \\(useForm\\)](https://react-hook-form.com/docs/useform)\n  * [React Window \\(useVirtualizer\\)](https://tanstack.com/virtual/latest)\n  * [React DnD \\(useDrag, useDrop\\)](https://react-dnd.github.io/react-dnd/docs/overview)\n\n[Previous](/docs/react/themes)[Headless dashboardAdd a dashboard to your app, styled with your existing UI components.Next](/docs/react/headless-dashboard)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)\n\nOn this page\n\n  * How Headless Components Work\n  * Popular Libraries that leverage React Hooks",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/headless"
    },
    {
      "title": "Headless dashboard - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### Getting Started\n\n  * [Quickstart](/docs/react/quickstart)\n  * [Custom Themes](/docs/react/themes)\n  * [What is Headless UI?](/docs/react/headless)\n\n##### Use cases\n\n  * [Headless dashboard](/docs/react/headless-dashboard)\n  * [Headless CSV and PDF export](/docs/react/headless-data-export)\n\n##### Components\n\n  * [QuillProvider](/docs/react/quill-provider)\n  * [Dashboard](/docs/react/dashboard)\n  * [ReportBuilder](/docs/react/report-builder)\n  * [Chart](/docs/react/chart)\n  * [StaticChart](/docs/react/static-chart)\n  * [Table](/docs/react/table)\n  * [SQLEditor](/docs/react/sql-editor)\n\n##### Hooks\n\n  * [useDashboard](/docs/react/use-dashboard)\n  * [useDashboardReport](/docs/react/use-dashboard-report)\n  * [useDashboards](/docs/react/use-dashboards)\n  * [useQuill](/docs/react/use-quill)\n  * [useExport](/docs/react/use-export)\n\n##### Functions\n\n  * [format](/docs/react/format)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nUse cases\n\nHeadless dashboard\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nUse cases\n\n# Headless dashboard\n\nAdd a dashboard to your app, styled with your existing UI components.\n\nApp.tsx\n\nCopy\n\nAsk AI\n\n    import {\n      QuillProvider,\n      useDashboard,\n      useDashboardReport,\n      format,\n    } from \"@quillsql/react\";\n    import { Card, CardHeader } from \"@/components/ui/card\";\n    import { Skeleton } from \"@/components/ui/skeleton\";\n\n    function App() {\n      return (\n        <QuillProvider\n          tenants={[{ tenantField: \"customer_id\", tenantIds: [2] }]}\n          publicKey=\"6579031b3e41c378aa8180ec\"\n        >\n          <CustomDashboard />\n        </QuillProvider>\n      );\n    }\n\n    function CustomDashboard() {\n      const { sections, isLoading } = useDashboard(\"quill demo dashboard\");\n\n      return (\n        <>\n          <MetricReportsSection reports={sections[\"metrics\"]} />\n        </>\n      );\n    }\n\n    function MetricsSection({ reports }: { reports: any[] }) {\n      return (\n        <div className=\"grid grid-cols-1 lg:grid-cols-6 gap-6\">\n          {reports.map((report: any) => (\n            <MetricCard key={report.id} reportId={report.id} name={report.name} />\n          ))}\n        </div>\n      );\n    }\n\n    interface MetricCardProps {\n      reportId: string;\n      name: string;\n    }\n\n    export function MetricCard({ reportId, name }: MetricCardProps) {\n      const { report, loading } = useDashboardReport(reportId);\n\n      if (loading) {\n        return (\n          <div className=\"lg:col-span-1\">\n            <Card className=\"h-full shadow-none bg-transparent border-none\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"space-y-1\">\n                  <Skeleton className=\"h-10 w-24\" />\n                  <Skeleton className=\"h-4 w-32\" />\n                  <p className=\"text-sm text-muted-foreground\">{name}</p>\n                </div>\n              </CardHeader>\n            </Card>\n          </div>\n        );\n      }\n\n      if (!report) return null;\n\n      const mainValue = format({\n        value: report.pivotRows?.[0]?.[report.xAxisField],\n        format: report.xAxisFormat,\n      });\n\n      return (\n        <Card className=\"h-full shadow-none bg-transparent border-none\">\n          <CardHeader className=\"pb-4 bg-transparent\">\n            <div className=\"space-y-1\">\n              <h1 className=\"text-4xl font-bold tracking-tight\">{mainValue}</h1>\n              <p className=\"text-sm text-muted-foreground\">{name}</p>\n            </div>\n          </CardHeader>\n        </Card>\n      );\n    }\n\n[Previous](/docs/react/headless)[Headless CSV and PDF exportAdd a report detail page to your app with CSV and PDF export, styled with your existing UI components.Next](/docs/react/headless-data-export)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/headless-dashboard"
    },
    {
      "title": "Headless CSV and PDF export - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### Getting Started\n\n  * [Quickstart](/docs/react/quickstart)\n  * [Custom Themes](/docs/react/themes)\n  * [What is Headless UI?](/docs/react/headless)\n\n##### Use cases\n\n  * [Headless dashboard](/docs/react/headless-dashboard)\n  * [Headless CSV and PDF export](/docs/react/headless-data-export)\n\n##### Components\n\n  * [QuillProvider](/docs/react/quill-provider)\n  * [Dashboard](/docs/react/dashboard)\n  * [ReportBuilder](/docs/react/report-builder)\n  * [Chart](/docs/react/chart)\n  * [StaticChart](/docs/react/static-chart)\n  * [Table](/docs/react/table)\n  * [SQLEditor](/docs/react/sql-editor)\n\n##### Hooks\n\n  * [useDashboard](/docs/react/use-dashboard)\n  * [useDashboardReport](/docs/react/use-dashboard-report)\n  * [useDashboards](/docs/react/use-dashboards)\n  * [useQuill](/docs/react/use-quill)\n  * [useExport](/docs/react/use-export)\n\n##### Functions\n\n  * [format](/docs/react/format)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nUse cases\n\nHeadless CSV and PDF export\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nUse cases\n\n# Headless CSV and PDF export\n\nAdd a report detail page to your app with CSV and PDF export, styled with your existing UI components.\n\n[Previous](/docs/react/headless-dashboard)[QuillProviderA context provider that wraps all quill componentsNext](/docs/react/quill-provider)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/headless-data-export"
    },
    {
      "title": "QuillProvider - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### Getting Started\n\n  * [Quickstart](/docs/react/quickstart)\n  * [Custom Themes](/docs/react/themes)\n  * [What is Headless UI?](/docs/react/headless)\n\n##### Use cases\n\n  * [Headless dashboard](/docs/react/headless-dashboard)\n  * [Headless CSV and PDF export](/docs/react/headless-data-export)\n\n##### Components\n\n  * [QuillProvider](/docs/react/quill-provider)\n  * [Dashboard](/docs/react/dashboard)\n  * [ReportBuilder](/docs/react/report-builder)\n  * [Chart](/docs/react/chart)\n  * [StaticChart](/docs/react/static-chart)\n  * [Table](/docs/react/table)\n  * [SQLEditor](/docs/react/sql-editor)\n\n##### Hooks\n\n  * [useDashboard](/docs/react/use-dashboard)\n  * [useDashboardReport](/docs/react/use-dashboard-report)\n  * [useDashboards](/docs/react/use-dashboards)\n  * [useQuill](/docs/react/use-quill)\n  * [useExport](/docs/react/use-export)\n\n##### Functions\n\n  * [format](/docs/react/format)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nComponents\n\nQuillProvider\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nComponents\n\n# QuillProvider\n\nA context provider that wraps all quill components\n\nApp.tsx\n\nCopy\n\nAsk AI\n\n    import { QuillProvider } from \"@quillsql/react\";\n\n    function App() {\n      return (\n        <QuillProvider\n          publicKey={process.env.QUILL_API_KEY}\n          tenants={[user.organizationId]}\n        >\n          {children}\n        </QuillProvider>\n      );\n    }\n\nThe quill provider allows all the quill components in your app to share information which lets your dashboards render fast and update dynamically. Similar to React’s `Context.Provider`, `QuillProvider` wraps your React app and places Quill Client on the context, enabling you to access it from anywhere in your component tree. We suggest putting the QuillProvider somewhere high in your app, above any component that might need to access your quill data.\n\n### \n\n​\n\nWith OrgId\n\nIf you’re using the Quill Cloud, you can pass in your public key and the current organizationId \\(if any\\) and the Quill Provider will automatically connect to the hosted Quill Cloud.\n\nWith OrgId\n\nCopy\n\nAsk AI\n\n    <QuillProvider\n      publicKey={process.env.QUILL_API_KEY}\n      tenants={[user.organizationId]}\n    >\n      {children}\n    </QuillProvider>\n\n### \n\n​\n\nWith QueryEndpoint\n\nIf you’re self-hosting Quill, you can point the Quill Provider to the location of the server running the Quill SDK. You may also pass a map of query headers that will be forwarded to your server with every request Quill sends. This can be useful if the `/quill` endpoint is behind a preexisting auth middleware.\n\nWith QueryEndpoint\n\nCopy\n\nAsk AI\n\n    <QuillProvider\n      publicKey={process.env.QUILL_API_KEY}\n      queryEndpoint=\"https://yourdomain.com/quill\"\n      queryHeaders={{}}\n    >\n      {children}\n    </QuillProvider>\n\n## \n\n​\n\nProps\n\n​\n\npublicKey\n\nstring\n\nrequired\n\nThe public Quill API key. This can be found in the Quill BI Platform by clicking “Manage” on an environment in the environment dropdown -> “Copy public key”.\n\n​\n\nenvironment\n\nstring\n\nThe environment this app is running in \\(eg. “production”\\).\n\n​\n\ntenants\n\narray\n\nThe tenant ids of the user. Required if not passing a queryEndpoint. If this value is not passed in on the frontend, it should be passed in on the backend if you are using a self-hosted server.\n\n​\n\nqueryEndpoint\n\nstring\n\nThe url of your self-hosted server running the quill server SDK, if any.\n\n​\n\nqueryHeaders\n\nobject\n\nAdditional query headers passed along with all requests to the custom query endpoint, if any.\n\n​\n\nwithCredentials\n\nboolean\n\nWhether to include credentials with requests to the query endpoint.\n\n​\n\ntheme\n\nQuillTheme\n\nA custom theme used throughout your dashboard.\n\n​\n\nchildren\n\nReactNode\n\nThe children of the provider. This is usually the rest of your app.\n\n[Previous](/docs/react/headless-data-export)[DashboardA list of Quill Reports grouped into Metrics, Charts, and Tables.Next](/docs/react/dashboard)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/quill-provider"
    },
    {
      "title": "ReportBuilder - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### Getting Started\n\n  * [Quickstart](/docs/react/quickstart)\n  * [Custom Themes](/docs/react/themes)\n  * [What is Headless UI?](/docs/react/headless)\n\n##### Use cases\n\n  * [Headless dashboard](/docs/react/headless-dashboard)\n  * [Headless CSV and PDF export](/docs/react/headless-data-export)\n\n##### Components\n\n  * [QuillProvider](/docs/react/quill-provider)\n  * [Dashboard](/docs/react/dashboard)\n  * [ReportBuilder](/docs/react/report-builder)\n  * [Chart](/docs/react/chart)\n  * [StaticChart](/docs/react/static-chart)\n  * [Table](/docs/react/table)\n  * [SQLEditor](/docs/react/sql-editor)\n\n##### Hooks\n\n  * [useDashboard](/docs/react/use-dashboard)\n  * [useDashboardReport](/docs/react/use-dashboard-report)\n  * [useDashboards](/docs/react/use-dashboards)\n  * [useQuill](/docs/react/use-quill)\n  * [useExport](/docs/react/use-export)\n\n##### Functions\n\n  * [format](/docs/react/format)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nComponents\n\nReportBuilder\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nComponents\n\n# ReportBuilder\n\nA UI component for creating and editing Quill Reports\n\nApp.tsx\n\nCopy\n\nAsk AI\n\n    import { QuillProvider, ReportBuilder } from \"@quillsql/react\";\n\n    function App() {\n      return (\n        <QuillProvider tenants={[2]} publicKey=\"6579031b3e41c378aa8180ec\">\n          <ReportBuilder initialTableName=\"transactions\" />\n        </QuillProvider>\n      );\n    }\n\nAllows non-technical users to build SQL queries using either UI or AI and then edit them on the fly. Once users have constructed a query they like, they can click a button and add that report to their dashboard or export it as a CSV.\n\nMake sure `QuillProvider` is a parent of the `ReportBuilder` component.\n\n## \n\n​\n\nExamples\n\n  * Ant Design\n  * Material Design\n\n[![Edit \\[Ant Design\\] Quill React Components](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/p/devbox/ant-design-quill-react-components-9qcs8k?embed=1)\n\nAnt Design\n\nCopy\n\nAsk AI\n\n    import { ReportBuilder } from \"@quillsql/react\";\n\n    import {\n      AntButton,\n      AntDeleteButton,\n      AntSecondaryButton,\n    } from \"./ui/ant/Button\";\n    import { AntCard } from \"./ui/ant/Card\";\n    import { AntCheckbox } from \"./ui/ant/Checkbox\";\n    import {\n      AntSelectColumn,\n      AntDraggableColumn,\n      AntColumnSearchEmptyState,\n    } from \"./ui/ant/Column\";\n    import { AntTextInput } from \"./ui/ant/Input\";\n    import {\n      AntChartBuilderFormContainer,\n      AntChartBuilderInputColumnContainer,\n      AntChartBuilderInputRowContainer,\n      AntContainer,\n      AntErrorMessageComponent,\n      AntLoadingComponent,\n      AntPivotColumnContainer,\n      AntPivotRowContainer,\n      AntSidebar,\n    } from \"./ui/ant/Layout\";\n    import { AntModal } from \"./ui/ant/Modal\";\n    import {\n      AntPopover,\n      AntFilterPopover,\n      AntSortPopover,\n      AntLimitPopover,\n    } from \"./ui/ant/Popover\";\n    import { AntSelect } from \"./ui/ant/Select\";\n    import { AntTable } from \"./ui/ant/Table\";\n    import { AntTabs } from \"./ui/ant/Tabs\";\n    import {\n      AntSidebarHeading,\n      AntLabel,\n      AntHeader,\n      AntText,\n      AntSubHeader,\n    } from \"./ui/ant/Typography\";\n\n    export function AntReportBuilder() {\n      return (\n        <ReportBuilder\n          destinationDashboard=\"Transactions\"\n          TableComponent={AntTable}\n          SidebarComponent={AntSidebar}\n          ContainerComponent={AntContainer}\n          PopoverComponent={AntPopover}\n          CardComponent={AntCard}\n          ButtonComponent={AntButton}\n          ModalComponent={AntModal}\n          SecondaryButtonComponent={AntSecondaryButton}\n          TextInputComponent={AntTextInput}\n          SelectComponent={AntSelect}\n          TabsComponent={AntTabs}\n          CheckboxComponent={AntCheckbox}\n          SelectColumnComponent={AntSelectColumn}\n          DraggableColumnComponent={AntDraggableColumn}\n          SidebarHeadingComponent={AntSidebarHeading}\n          FilterPopoverComponent={AntFilterPopover}\n          SortPopoverComponent={AntSortPopover}\n          LimitPopoverComponent={AntLimitPopover}\n          LabelComponent={AntLabel}\n          HeaderComponent={AntHeader}\n          SubHeaderComponent={AntSubHeader}\n          TextComponent={AntText}\n          DeleteButtonComponent={AntDeleteButton}\n          ErrorMessageComponent={AntErrorMessageComponent}\n          ChartBuilderInputRowContainer={AntChartBuilderInputRowContainer}\n          ChartBuilderInputColumnContainer={AntChartBuilderInputColumnContainer}\n          PivotRowContainer={AntPivotRowContainer}\n          PivotColumnContainer={AntPivotColumnContainer}\n          LoadingComponent={AntLoadingComponent}\n          ColumnSearchEmptyState={AntColumnSearchEmptyState}\n          ChartBuilderFormContainer={AntChartBuilderFormContainer}\n        />\n      );\n    }\n\n### \n\n​\n\nPrefetch data from a particular table\n\nYou can pass an `initialTableName` to have the report builder automatically load data from a particular table in your schema.\n\nApp.tsx\n\nCopy\n\nAsk AI\n\n    import { QuillProvider, ReportBuilder } from \"@quillsql/react\";\n\n    function App() {\n      return (\n        <QuillProvider tenants={[2]} publicKey=\"6579031b3e41c378aa8180ec\">\n          <ReportBuilder initialTableName=\"transactions\" />\n        </QuillProvider>\n      );\n    }\n\n### \n\n​\n\nEdit an existing report\n\nYou can pass a `reportId` to have the report builder load the metadata for a pre-existing report. This might be useful if you want to allow your end users to edit the reports they created.\n\nApp.tsx\n\nCopy\n\nAsk AI\n\n    import { QuillProvider, ReportBuilder } from \"@quillsql/react\";\n\n    function App() {\n      return (\n        <QuillProvider tenants={[2]} publicKey=\"6579031b3e41c378aa8180ec\">\n          <ReportBuilder reportId=\"664283fb4db8ad000bfe54d7\" />\n        </QuillProvider>\n      );\n    }\n\n### \n\n​\n\nQuery all views in your Quill schema\n\nBy default, the Quill Report Builder will query all tables in your schema and new reports will be created upon completion.\n\nApp.tsx\n\nCopy\n\nAsk AI\n\n    import { QuillProvider, ReportBuilder } from \"@quillsql/react\";\n\n    function App() {\n      return (\n        <QuillProvider tenants={[2]} publicKey=\"6579031b3e41c378aa8180ec\">\n          <ReportBuilder />\n        </QuillProvider>\n      );\n    }\n\n## \n\n​\n\nProps\n\n​\n\ninitialTableName\n\nstring\n\nThe default table name to show when first loading the ReportBuilder.\n\nSee the [prefetch data example](/docs/components/report-builder#prefetch-data-from-a-particular-table) to see an example of how this is used.\n\n​\n\ndestinationDashboard\n\nstring\n\nSets the dashboard of a report created in the report builder.\n\nCheckout our [UI examples](/docs/components/examples) to see how this is used.\n\n​\n\ndestinationSection\n\nstring\n\nSets the dashboard section of a report created in the report builder.\n\nCheckout our [UI examples](/docs/components/examples) to see how this is used.\n\n​\n\nButtonComponent\n\n\\(props: ButtonComponentProps\\) => JSX.Element\n\nA primary button component.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/button.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function ButtonComponent({ onClick, label, disabled, icon }) {\n    \treturn (\n    \t\t<button onClick={onClick} disabled={disabled}>\n    \t\t\t{icon}\n    \t\t\t{label}\n    \t\t</button>\n    \t);\n    }\n\n​\n\nButtonComponentProps\n\nobject\n\nHide properties\n\n​\n\nonClick\n\n\\(\\) => void\n\nrequired\n\nA callback fired when the button is clicked.\n\n​\n\nlabel\n\nstring\n\nrequired\n\nThe text content of the button.\n\n​\n\ndisabled\n\nboolean\n\nWhether the button is disabled.\n\n​\n\nicon\n\nReactNode\n\nAn icon to put in front of the label.\n\n​\n\nSecondaryButtonComponent\n\n\\(props: ButtonComponentProps\\) => JSX.Element\n\nA secondary button component.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/secondary_button.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function SecondaryButtonComponent({ onClick, label, disabled, icon }) {\n    \treturn (\n    \t\t<button onClick={onClick} disabled={disabled}>\n    \t\t\t{icon}\n    \t\t\t{label}\n    \t\t</button>\n    \t);\n    }\n\n​\n\nButtonComponentProps\n\nobject\n\nHide properties\n\n​\n\nonClick\n\n\\(\\) => void\n\nrequired\n\nA callback fired when the button is clicked.\n\n​\n\nlabel\n\nstring\n\nrequired\n\nThe text content of the button.\n\n​\n\ndisabled\n\nboolean\n\nWhether the button is disabled.\n\n​\n\nicon\n\nReactNode\n\nAn icon to put in front of the label.\n\n​\n\nDeleteButtonComponent\n\n\\(props: DeleteButtonComponentProps\\) => JSX.Element\n\nA small delete button used to click out of things. Usually an “X” icon.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/delete_button.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    import { deleteSVG } from \"./ui/icons\";\n    export function DeleteButtonComponent({ onClick }) {\n    \treturn <button onClick={onClick}>{deleteSVG}</button>;\n    }\n\n​\n\nDeleteButtonComponentProps\n\nobject\n\nHide properties\n\n​\n\nonClick\n\n\\(\\) => void\n\nrequired\n\nA callback fired when the button is clicked.\n\n​\n\nTextInputComponent\n\n\\(props: TextInputComponentProps\\) => JSX.Element\n\nA input element for getting text from the user.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/text_input.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function TextInputComponent({ id, width, value, label, placeholder, onChange }) {\n    \treturn (\n    \t\t<label>\n    \t\t\t{label}\n    \t\t\t<input\n    \t\t\t\tid={id}\n    \t\t\t\tstyle={{ width }}\n    \t\t\t\tvalue={value}\n    \t\t\t\tplaceholder={placeholder}\n    \t\t\t\tonChange={onChange}\n    \t\t\t/>\n    \t\t</label>\n    \t);\n    }\n\n​\n\nTextInputComponentProps\n\nobject\n\nHide properties\n\n​\n\nid\n\nstring\n\nrequired\n\nThe id of the input element.\n\n​\n\nwidth\n\nnumber\n\nrequired\n\nThe width of the input element in pixels.\n\n​\n\nvalue\n\nstring\n\nrequired\n\nThe width of the input element in pixels.\n\n​\n\nlabel\n\nstring\n\nThe label of the text input component.\n\n​\n\nplaceholder\n\nstring\n\nThe placeholder for the input element.\n\n​\n\nonChange\n\n\\(event: ChangeEvent<HTMLInputElement>\\) => void\n\nrequired\n\nAn event callback that is fired when the input value changes.\n\n​\n\nModalComponent\n\n\\(props: ModalComponentProps\\) => JSX.Element\n\nA modal component.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/modal.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    import { Modal } from \"./ui/modal\";\n    export function ModalComponent({ isOpen, setIsOpen, title, children, width, height }) {\n    \treturn (\n    \t\t<Modal\n    \t\t\tisOpen={isOpen}\n    \t\t\tsetIsOpen={setIsOpen}\n    \t\t\ttitle={title}\n    \t\t\tstyle={{ width, height }}\n    \t\t>\n    \t\t\t{children}\n    \t\t</Modal>\n    \t);\n    }\n\n​\n\nModalComponentProps\n\nobject\n\nHide properties\n\n​\n\nisOpen\n\nboolean\n\nrequired\n\nWhether the modal is open.\n\n​\n\nsetIsOpen\n\n\\(isOpen: boolean\\) => void\n\nrequired\n\nA callback to set whether the modal is open.\n\n​\n\ntitle\n\nstring\n\nThe title of the modal, if any.\n\n​\n\nchildren\n\nReactNode\n\nrequired\n\nThe body of the modal.\n\n​\n\nwidth\n\nnumber\n\nThe width of the modal, in pixels.\n\n​\n\nheight\n\nnumber\n\nThe height of the modal, in pixels.\n\n​\n\nChartBuilderModalComponent\n\n\\(props: ModalComponentProps\\) => JSX.Element\n\nA modal component.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/chart_builder_modal.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    import { Modal } from \"./ui/modal\";\n    export function ChartBuilderModalComponent({ isOpen, setIsOpen, title, children, width, height }) {\n    \treturn (\n    \t\t<Modal\n    \t\t\tisOpen={isOpen}\n    \t\t\tsetIsOpen={setIsOpen}\n    \t\t\ttitle={title}\n    \t\t\tstyle={{ width, height }}\n    \t\t>\n    \t\t\t{children}\n    \t\t</Modal>\n    \t);\n    }\n\n​\n\nModalComponentProps\n\nobject\n\nHide properties\n\n​\n\nisOpen\n\nboolean\n\nrequired\n\nWhether the modal is open.\n\n​\n\nsetIsOpen\n\n\\(isOpen: boolean\\) => void\n\nrequired\n\nA callback to set whether the modal is open.\n\n​\n\ntitle\n\nstring\n\nThe title of the modal, if any.\n\n​\n\nchildren\n\nReactNode\n\nrequired\n\nThe body of the modal.\n\n​\n\nwidth\n\nnumber\n\nThe width of the modal, in pixels.\n\n​\n\nheight\n\nnumber\n\nThe height of the modal, in pixels.\n\n​\n\nSelectComponent\n\n\\(props: SelectComponentProps\\) => JSX.Element\n\nA select component.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/select.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function SelectComponent({ value, label, width, onChange, options }) {\n    \treturn (\n    \t\t<label>\n    \t\t\t{label}\n    \t\t\t<select value={value} onChange={onChange} style={{ width }}>\n    \t\t\t\t{options.map(({ value, label }) => <option value={value}>{label}</option>)}\n    \t\t\t</select>\n    \t\t</label>\n    \t);\n    }\n\n​\n\nSelectComponentProps\n\nobject\n\nHide properties\n\n​\n\nvalue\n\nstring\n\nrequired\n\nThe value of the select element.\n\n​\n\nlabel\n\nstring\n\nThe label above the select element.\n\n​\n\nwidth\n\nnumber\n\nrequired\n\nThe width of the select element, in pixels.\n\n​\n\nonChange\n\n\\(event: ChangeEvent<HTMLSelectElement>\\) => void\n\nrequired\n\nAn event callback that is fired when the select value changes.\n\n​\n\noptions\n\n\\{ value: string; label: string; \\}\\[\\]\n\nrequired\n\nAn array of value, label pairs which represent the select options.\n\n​\n\nTableComponent\n\n\\(props: TableComponentProps\\) => JSX.Element\n\nA table component.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/table.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    import { Table } from \"./ui/table\";\n    import { LoadingSkeleton } from \"./ui/loading\";\n\n    export function TableComponent({ rows, columns, isLoading }) {\n    \tif (isLoading) return <LoadingSkeleton />\n    \treturn <Table rows={rows} columns={columns} />;\n    }\n\n​\n\nTableComponentProps\n\nobject\n\nHide properties\n\n​\n\nrows\n\n\\{ \\[key: string\\]: any \\}\\[\\]\n\nrequired\n\nThe rows of the table are an array of objects.\n\n​\n\ncolumns\n\n\\{ label: string; field: string; \\}\\[\\]\n\nrequired\n\nThe columns of the table are an array of label, field pairs.\n\n​\n\nisLoading\n\nboolean\n\nWhether the table is loading.\n\n​\n\nPopoverComponent\n\n\\(props: PopoverComponentProps\\) => JSX.Element\n\nA popover component.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/pivot_popover.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    import { Popover } from \"./ui/popover\";\n\n    export function PopoverComponent({ isOpen, setIsOpen, popoverTitle, popoverChildren }) {\n    \treturn (\n    \t\t<Popover isOpen={isOpen} setIsOpen={setIsOpen} title={popoverTitle}>\n    \t\t\t{popoverChildren}\n    \t\t</Popover>\n    \t);\n    }\n\n​\n\nPopoverComponentProps\n\nobject\n\nHide properties\n\n​\n\nisOpen\n\nboolean\n\nrequired\n\nWhether the popover is open.\n\n​\n\nsetIsOpen\n\n\\(isOpen: boolean\\) => void\n\nrequired\n\nA callback to set whether the popover is open.\n\n​\n\ntriggerLabel\n\nstring\n\nThe label of the popover trigger, if any.\n\n​\n\npopoverTitle\n\nstring\n\nThe title of the popover, if any.\n\n​\n\npopoverChildren\n\nReactNode\n\nrequired\n\nThe body of the popover.\n\n​\n\nFilterPopoverComponent\n\n\\(props: FilterPopoverComponentProps\\) => JSX.Element\n\nA popover component for filters created in the report builder.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/filter_popover.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    import { Popover } from \"./ui/popover\";\n\n    export function FilterPopoverComponent({ isOpen, setIsOpen, popoverTitle, popoverChildren }) {\n    \treturn (\n    \t\t<Popover isOpen={isOpen} setIsOpen={setIsOpen} title={popoverTitle}>\n    \t\t\t{popoverChildren}\n    \t\t</Popover>\n    \t);\n    }\n\n​\n\nFilterPopoverComponentProps\n\nobject\n\nHide properties\n\n​\n\nisOpen\n\nboolean\n\nrequired\n\nWhether the popover is open.\n\n​\n\nsetIsOpen\n\n\\(isOpen: boolean\\) => void\n\nrequired\n\nA callback to set whether the popover is open.\n\n​\n\npopoverTitle\n\nstring\n\nThe title of the popover, if any.\n\n​\n\npopoverChildren\n\nReactNode\n\nrequired\n\nThe body of the popover.\n\n​\n\nfilterLabel\n\nstring\n\nrequired\n\nThe text contents of the filter item.\n\n​\n\nonClickDelete\n\n\\(event: MouseEvent<HTMLElement>\\) => void\n\nrequired\n\nAn event callback fired when the user clicks the delete button on the filter.\n\n​\n\nSortPopoverComponent\n\n\\(props: SortPopoverComponentProps\\) => JSX.Element\n\nA popover component for sort items created in the report builder.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/sort_popover.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    import { Popover } from \"./ui/popover\";\n\n    export function SortPopoverComponent({ isOpen, setIsOpen, popoverTitle, popoverChildren }) {\n    \treturn (\n    \t\t<Popover isOpen={isOpen} setIsOpen={setIsOpen} title={popoverTitle}>\n    \t\t\t{popoverChildren}\n    \t\t</Popover>\n    \t);\n    }\n\n​\n\nSortPopoverComponentProps\n\nobject\n\nHide properties\n\n​\n\nisOpen\n\nboolean\n\nrequired\n\nWhether the popover is open.\n\n​\n\nsetIsOpen\n\n\\(isOpen: boolean\\) => void\n\nrequired\n\nA callback to set whether the popover is open.\n\n​\n\npopoverTitle\n\nstring\n\nThe title of the popover, if any.\n\n​\n\npopoverChildren\n\nReactNode\n\nrequired\n\nThe body of the popover.\n\n​\n\nsortLabel\n\nstring\n\nrequired\n\nThe text contents of the sort item.\n\n​\n\nonClickDelete\n\n\\(event: MouseEvent<HTMLElement>\\) => void\n\nrequired\n\nAn event callback fired when the user clicks the delete button on the sort item.\n\n​\n\nLimitPopoverComponent\n\n\\(props: LimitPopoverComponentProps\\) => JSX.Element\n\nA popover component for limits created in the report builder.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/limit_popover.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    import { Popover } from \"./ui/popover\";\n\n    export function LimitPopoverComponent({ isOpen, setIsOpen, popoverTitle, popoverChildren }) {\n    \treturn (\n    \t\t<Popover isOpen={isOpen} setIsOpen={setIsOpen} title={popoverTitle}>\n    \t\t\t{popoverChildren}\n    \t\t</Popover>\n    \t);\n    }\n\n​\n\nLimitPopoverComponentProps\n\nobject\n\nHide properties\n\n​\n\nisOpen\n\nboolean\n\nrequired\n\nWhether the popover is open.\n\n​\n\nsetIsOpen\n\n\\(isOpen: boolean\\) => void\n\nrequired\n\nA callback to set whether the popover is open.\n\n​\n\npopoverTitle\n\nstring\n\nThe title of the popover, if any.\n\n​\n\npopoverChildren\n\nReactNode\n\nrequired\n\nThe body of the popover.\n\n​\n\nlimitLabel\n\nstring\n\nrequired\n\nThe text contents of the limit.\n\n​\n\nonClickDelete\n\n\\(event: MouseEvent<HTMLElement>\\) => void\n\nrequired\n\nAn event callback fired when the user clicks the delete button on the limit.\n\n​\n\nTabsComponent\n\n\\(props: TabsComponentProps\\) => JSX.Element\n\nA small navigation menu used to switch between two or more states.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/tabs.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    import { Tabs, Tab } from \"./ui/tabs\";\n    export function TabsComponent({ value, onChange, options }) {\n    \treturn (\n    \t\t<Tabs value={value} onChange={onChange}>\n    \t\t\t{options.map(({ value, label }) => <Tab value={value}>{label}</Tab>)}\n    \t\t</Tabs>\n    \t);\n    }\n\n​\n\nTabsComponentProps\n\nobject\n\nHide properties\n\n​\n\nvalue\n\nstring\n\nrequired\n\nThe value of the currently selected tab.\n\n​\n\nonChange\n\n\\(event: ChangeEvent<HTMLSelectElement>\\) => void\n\nrequired\n\nAn event callback fired when the selected tab changes.\n\n​\n\noptions\n\n\\{ label: string; value: string; \\}\\[\\]\n\nrequired\n\nAn array of value, label pairs which represent the tabs to display.\n\n​\n\nCheckboxComponent\n\n\\(props: CheckboxComponentProps\\) => JSX.Element\n\nA checkbox component.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/checkbox.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function CheckboxComponent({ isChecked, label, onChange }) {\n    \treturn (\n    \t\t<label>\n    \t\t\t<input type=\"checkbox\" checked={isChecked} onChange={onChange} />\n    \t\t\t{label}\n    \t\t</label>\n    \t);\n    }\n\n​\n\nCheckboxComponentProps\n\nobject\n\nShow properties\n\n​\n\nisChecked\n\nboolean\n\nrequired\n\nWhether the checkbox is checked.\n\n​\n\nlabel\n\nstring\n\nrequired\n\nA label for the checkbox component.\n\n​\n\nonChange\n\n\\(event: React.ChangeEvent<HTMLInputElement>\\) => void\n\nrequired\n\nAn event callback fired when the checkbox’s value changes.\n\n​\n\nSidebarComponent\n\n\\(props: SidebarComponentProps\\) => JSX.Element\n\nA container for the left sidebar.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/sidebar_component.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function SidebarComponent({ children }) {\n    \tconst style = {\n    \t\tdisplay: \"flex\",\n    \t\tflexDirection: \"column\",\n    \t\tgap: 24,\n    \t}\n    \treturn <aside style={style}>{children}</aside>\n    }\n\n​\n\nSidebarComponentProps\n\nobject\n\nShow properties\n\n​\n\nchildren\n\nReactNode\n\nrequired\n\nThe children of the sidebar container.\n\n​\n\nContainerComponent\n\n\\(props: ContainerComponentProps\\) => JSX.Element\n\nA container for the main content \\(everything right of the sidebar\\).\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/container.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function ContainerComponent({ children }) {\n    \tconst style = {\n    \t\tdisplay: \"flex\",\n    \t\tflexDirection: \"column\",\n    \t\tgap: 24,\n    \t}\n    \treturn <main style={style}>{children}</main>\n    }\n\n​\n\nContainerComponentProps\n\nobject\n\nHide properties\n\n​\n\nchildren\n\nReactNode\n\nrequired\n\nThe children of the main container.\n\n​\n\nLoadingComponent\n\n\\(\\) => JSX.Element\n\nA component to show while the query results are loading.\n\n​\n\nSelectColumnComponent\n\n\\(props: SelectColumnComponentProps\\) => JSX.Element\n\nA component to show selected columns.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/select_column.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function SelectColumnComponent({ label, isSelected, setSelected, DragHandle }) {\n    \treturn (\n    \t\t<div>\n    \t\t\t<DragHandle/>\n    \t\t\t<input type=\"checkbox\" isChecked={isSelected} onClick={setSelected} />\n    \t\t\t{label}\n    \t\t</div>\n    \t);\n    }\n\n​\n\nSelectColumnComponentProps\n\nobject\n\nHide properties\n\n​\n\nlabel\n\nstring\n\nrequired\n\nThe label of the selected column.\n\n​\n\nisSelected\n\nboolean\n\nrequired\n\nWhether this column has been selected.\n\n​\n\nsetSelected\n\n\\(\\) => void\n\nrequired\n\nA callback that is fired when the user checks this columns’ checkbox.\n\n​\n\nDragHandle\n\n\\(\\{ dragIcon \\}: \\{ dragIcon: \\(\\) => JSX.Element \\}\\) => JSX.Element\n\nThe handle the user drags this column by.\n\n​\n\nDraggableColumnComponent\n\n\\(props: DraggableColumnComponentProps\\) => JSX.Element\n\nA draggable component used to reorder columns.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/drag_column.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    import { DeleteSVG } from \"./ui/icons\";\n    export function DraggableColumnComponent({ label, onDelete, DragHandle }) {\n    \treturn (\n    \t\t<div>\n    \t\t\t<DragHandle/>\n    \t\t\t{label}\n    \t\t\t<button onClick={onDelete}>\n    \t\t\t\t<DeleteSVG />\n    \t\t\t</button>\n    \t\t</div>\n    \t);\n    }\n\n​\n\nDraggableColumnComponentProps\n\nobject\n\nShow properties\n\n​\n\nlabel\n\nstring\n\nrequired\n\nThe label of the draggable column.\n\n​\n\nonDelete\n\n\\(\\) => void\n\nrequired\n\nA callback that is fired when this column is removed from the query.\n\n​\n\nDragHandle\n\n\\(\\{ dragIcon \\}: \\{ dragIcon: \\(\\) => JSX.Element \\}\\) => JSX.Element\n\nThe handle the user drags this column by.\n\n​\n\nSidebarHeadingComponent\n\n\\(props: SidebarHeadingComponentProps\\) => JSX.Element\n\nA heading element for the sidebar.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/sidebar_heading.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function SidebarHeadingComponent({ label }) {\n    \treturn <h2>{label}</h2>;\n    }\n\n​\n\nSidebarHeadingComponentProps\n\nobject\n\nHide properties\n\n​\n\nlabel\n\nstring\n\nrequired\n\nThe text content of the sidebar heading.\n\n​\n\nCardComponent\n\n\\(props: CardComponentProps\\) => JSX.Element\n\nA card component used as a dismissable container of pivot information.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/card.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    import { Card } from \"./ui/card\";\n    export function CardComponent({ onClick, onDelete, children }) {\n    \tconst style = { position: 'absolute', top: 0, right: 0 };\n    \treturn (\n    \t\t<Card onClick={onClick} style={{ position: 'relative' }}>\n    \t\t\t{onDelete && <DeleteButton style={style} onClick={onDelete} />}\n    \t\t\t{children}\n    \t\t</Card>\n    \t);\n    }\n\n​\n\nCardComponentProps\n\nobject\n\nHide properties\n\n​\n\nchildren\n\nReactNode\n\nrequired\n\nThe children of the container.\n\n​\n\nonClick\n\n\\(\\) => void\n\nA callback that is fired when the card is clicked.\n\n​\n\nonDelete\n\n\\(\\) => void\n\nA callback that is fired the card is deleted.\n\n​\n\nLabelComponent\n\n\\(props: LabelComponentProps\\) => JSX.Element\n\nA label component.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/label.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function LabelComponent({ label }) {\n    \treturn <h4>{label}</h4>;\n    }\n\n​\n\nLabelComponentProps\n\nobject\n\nHide properties\n\n​\n\nlabel\n\nstring\n\nrequired\n\nThe text content of the element.\n\n​\n\nHeaderComponent\n\n\\(props: HeaderComponentProps\\) => JSX.Element\n\nA header component.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/header.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function HeaderComponent({ label }) {\n    \treturn <h2>{label}</h2>;\n    }\n\n​\n\nHeaderComponentProps\n\nobject\n\nHide properties\n\n​\n\nlabel\n\nstring\n\nrequired\n\nThe text content of the element.\n\n​\n\nTextComponent\n\n\\(props: TextComponentProps\\) => JSX.Element\n\nA simple text component.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/text.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function TextComponent({ label }) {\n    \treturn <p>{label}</p>;\n    }\n\n​\n\nTextComponentProps\n\nobject\n\nHide properties\n\n​\n\nlabel\n\nstring\n\nrequired\n\nThe text content of the element.\n\n​\n\nSubHeaderComponent\n\n\\(props: \\{ label: string \\}\\) => JSX.Element\n\nA sub-header component describes a group of inputs.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/subheader.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function SubHeaderComponent({ label }) {\n    \treturn <h3>{label}</h3>;\n    }\n\n​\n\nSubHeaderComponentProps\n\nobject\n\nHide properties\n\n​\n\nlabel\n\n\\(\\) => void\n\nrequired\n\nThe label of the sub-header component.\n\n​\n\nChartBuilderInputRowContainer\n\n\\(props: \\{ children: ReactNode \\}\\) => JSX.Element\n\nA container for each row of inputs for the ChartBuilder form.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/chart_builder_input_row_container.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function ChartBuilderInputRowContainer({ children }) {\n    \tconst style = {\n    \t\tdisplay: \"flex\",\n    \t\tflexDirection: \"row\",\n    \t\tgap: 12,\n    \t}\n    \treturn <div style={style}>{children}</div>\n    }\n\n​\n\nChartBuilderInputRowContainerProps\n\nobject\n\nShow properties\n\n​\n\nchildren\n\nReactNode\n\nrequired\n\nThe children of the container.\n\n​\n\nChartBuilderInputColumnContainer\n\n\\(props: \\{ children: ReactNode \\}\\) => JSX.Element\n\nA container for vertically-stacked rows of inputs for the ChartBuilder form.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/chart_builder_input_column_container.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function ChartBuilderInputColumnContainer({ children }) {\n    \tconst style = {\n    \t\tdisplay: \"flex\",\n    \t\tflexDirection: \"column\",\n    \t\tgap: 12,\n    \t}\n    \treturn <div style={style}>{children}</div>\n    }\n\n​\n\nChartBuilderInputColumnContainerProps\n\nobject\n\nShow properties\n\n​\n\nchildren\n\nReactNode\n\nrequired\n\nThe children of the container.\n\n​\n\nPivotRowContainer\n\n\\(props: \\{ children: ReactNode \\}\\) => JSX.Element\n\nA container for each row of inputs for the pivot form.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/pivot_row_container.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function PivotRowContainer({ children }) {\n    \tconst style = {\n    \t\tdisplay: \"flex\",\n    \t\tflexDirection: \"row\",\n    \t\tgap: 12,\n    \t}\n    \treturn <div style={style}>{children}</div>\n    }\n\n​\n\nPivotRowContainerProps\n\nobject\n\nShow properties\n\n​\n\nchildren\n\nReactNode\n\nrequired\n\nThe children of the container.\n\n​\n\nPivotColumnContainer\n\n\\(props: \\{ children: ReactNode \\}\\) => JSX.Element\n\nA container for vertically-stacked rows of inputs for the pivot form.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/pivot_column_container.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function PivotColumnContainer({ children }) {\n    \tconst style = {\n    \t\tdisplay: \"flex\",\n    \t\tflexDirection: \"column\",\n    \t\tgap: 12,\n    \t}\n    \treturn <div style={style}>{children}</div>\n    }\n\n​\n\nPivotColumnContainerProps\n\nobject\n\nShow properties\n\n​\n\nchildren\n\nReactNode\n\nrequired\n\nThe children of the container.\n\n​\n\nChartBuilderFormContainer\n\n\\(props: \\{ children: ReactNode \\}\\) => JSX.Element\n\nA container for vertically-stacked sections of the chart builder form.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/chart_builder_form_container.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function ChartBuilderFormContainer({ children }) {\n    \tconst style = {\n    \t\tdisplay: \"flex\",\n    \t\tflexDirection: \"column\",\n    \t\tgap: 18,\n    \t}\n    \treturn <div style={style}>{children}</div>\n    }\n\n​\n\nChartBuilderFormContainerProps\n\nobject\n\nHide properties\n\n​\n\nchildren\n\nReactNode\n\nrequired\n\nThe children of the container.\n\n​\n\nErrorMessageComponent\n\n\\(props: \\{ children: ReactNode \\}\\) => JSX.Element\n\nA component that displays error messages.\n\nShow props\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/error_message.png)\n\nExample\n\nCopy\n\nAsk AI\n\n    export function ErrorMessageComponent({ errorMessage }) {\n    \treturn <div>{errorMessage}</div>\n    }\n\n​\n\nErrorMessageComponentProps\n\nobject\n\nHide properties\n\n​\n\nerrorMessage\n\nReactNode\n\nrequired\n\nThe error message.\n\n​\n\nColumnSearchEmptyState\n\n\\(\\) => JSX.Element\n\nA component to show when no columns match the user’s query.\n\n​\n\nisAdminEnabled\n\nboolean\n\ndefault:false\n\nWhether the ReportBuilder is in admin mode \\(default: `false`\\).\n\n​\n\nisAIEnabled\n\nboolean\n\ndefault:true\n\nWhether the ReportBuilder’s AI features are enabled \\(default: `true`\\).\n\n​\n\npivotRecommendationsEnabled\n\nboolean\n\nWhether the PivotModal’s AI features are enabled.\n\n​\n\nshowChartBuilderTableFormatOptions\n\nboolean\n\nWhether to show the table format options on the ChartBuilder form.\n\n​\n\nclassName\n\nCSSProperties\n\nApplies the following classes to the ReportBuilder.This can be useful for TailwindCSS-style classname strings.\n\n​\n\ncontainerStyle\n\nCSSProperties\n\nCustom styling properties for the ReportBuilder’s top-level container.\n\n​\n\nreportId\n\nstring\n\nA report id that the Report Builder will query from and modify.\n\nSee the [report id example](/docs/components/report-builder#edit-an-existing-report) to see an example of how this is used.\n\n​\n\nonSubmitCreateReport\n\n\\(report: QuillReport\\) => void\n\nA callback function that will trigger when a new report is created.\n\n​\n\nonSubmitEditReport\n\n\\(report: QuillReport\\) => void\n\nA callback function that will trigger when a existing report is edited.\n\n​\n\nhideCopySQL\n\nboolean\n\ndefault:true\n\nWhether to hide the copy SQL button.\n\n​\n\nisChartBuilderHorizontalView\n\nboolean\n\ndefault:true\n\nWhether the chart builder is in horizontal view mode.Horizontal view mode is where the chart and table are displayed on the left and the editing form is displayed on the right, rather than being stacked vertically.\n\n[Previous](/docs/react/dashboard)[ChartThe Chart view of a Quill ReportNext](/docs/react/chart)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)\n\nOn this page\n\n  * Examples\n  * Prefetch data from a particular table\n  * Edit an existing report\n  * Query all views in your Quill schema\n  * Props\n\n![Edit \\[Ant Design\\] Quill React Components](https://codesandbox.io/static/img/play-codesandbox.svg)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/button.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/secondary_button.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/delete_button.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/text_input.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/modal.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/select.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/chart_builder_modal.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/table.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/pivot_popover.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/filter_popover.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/sort_popover.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/limit_popover.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/tabs.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/checkbox.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/select_column.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/drag_column.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/sidebar_heading.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/sidebar_component.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/card.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/container.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/label.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/header.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/text.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/subheader.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/pivot_column_container.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/chart_builder_input_column_container.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/error_message.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/chart_builder_input_row_container.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/pivot_row_container.png)\n\n![](https://mintlify.s3.us-west-1.amazonaws.com/quill/images/chart_builder_form_container.png)",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/report-builder"
    },
    {
      "title": "Chart - Quill",
      "content": "[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n##### Getting Started\n\n  * [Quickstart](/docs/react/quickstart)\n  * [Custom Themes](/docs/react/themes)\n  * [What is Headless UI?](/docs/react/headless)\n\n##### Use cases\n\n  * [Headless dashboard](/docs/react/headless-dashboard)\n  * [Headless CSV and PDF export](/docs/react/headless-data-export)\n\n##### Components\n\n  * [QuillProvider](/docs/react/quill-provider)\n  * [Dashboard](/docs/react/dashboard)\n  * [ReportBuilder](/docs/react/report-builder)\n  * [Chart](/docs/react/chart)\n  * [StaticChart](/docs/react/static-chart)\n  * [Table](/docs/react/table)\n  * [SQLEditor](/docs/react/sql-editor)\n\n##### Hooks\n\n  * [useDashboard](/docs/react/use-dashboard)\n  * [useDashboardReport](/docs/react/use-dashboard-report)\n  * [useDashboards](/docs/react/use-dashboards)\n  * [useQuill](/docs/react/use-quill)\n  * [useExport](/docs/react/use-export)\n\n##### Functions\n\n  * [format](/docs/react/format)\n\n  * [Learn more](https://quill.co)\n\n[Quill home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/light.png)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/quill/logo/dark.png)](https://quill.co)\n\nSearch...\n\n⌘K\n\n  * [Learn more](https://quill.co)\n  * [Learn more](https://quill.co)\n\nSearch...\n\nNavigation\n\nComponents\n\nChart\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\n[Architecture](/docs/architecture)[BI Platform](/docs/bi-platform/overview)[React SDK](/docs/react/quickstart)[Server SDK](/docs/server/quickstart)\n\nComponents\n\n# Chart\n\nThe Chart view of a Quill Report\n\nApp.tsx\n\nCopy\n\nAsk AI\n\n    import { QuillProvider, Chart } from \"@quillsql/react\";\n\n    const MyChart = () => (\n      <QuillProvider\n        tenants={{ tenantField: \"customer_id\", tenantIds: [2] }}\n        publicKey=\"6579031b3e41c378aa8180ec\"\n      >\n        <Chart reportId=\"664283fb4db8ad000bfe54d7\" />\n      </QuillProvider>\n    );\n\nA simple component that displays the given data in one of many chart types.\n\nMake sure `QuillProvider` is a parent of the `Chart` component.\n\n### \n\n​\n\nAutomatically fetch data by id\n\nIf you know the id of the chart you would like to display, you can pass in the reportId to the Chart component and it will load and display the data for that chart.\n\nCopy\n\nAsk AI\n\n    import { QuillProvider, Chart } from \"@quillsql/react\";\n\n    function App() {\n      return (\n        <QuillProvider\n          tenants={{ tenantField: \"customer_id\", tenantIds: [2] }}\n          publicKey=\"6579031b3e41c378aa8180ec\"\n        >\n          <Chart reportId=\"664283fb4db8ad000bfe54d7\" />\n        </QuillProvider>\n      );\n    }\n\n## \n\n​\n\nProps\n\n​\n\nreportId\n\nstring\n\nThe chart id. The most usage is through a detail page built to navigate from the dashboard - using the onClick callback to get the reportId, and navigating to a route \\(say, reports/:id\\) where the url param is passed in as the reportId. For a standalone table, you can find the reportId in the Quill BI Platform and pass it in directly.When config is passed, the chart will not refetch the given report and will instead simply render the report it was given.\n\nA `config` must be passed if `reportId` is not present.\n\n​\n\ncolors\n\nstring\\[\\]\n\nA list of color strings used to color the chart.For example, a pie chart would use the colors for each section and a bar chart would use the colors for each bar.\n\n​\n\nisAnimationActive\n\nboolean\n\nWhether to show animations on render complete.\n\n​\n\nhideXAxis\n\nboolean\n\nWhether to hide the x axis.\n\n​\n\nhideYAxis\n\nboolean\n\nWhether to hide the y axis.\n\n​\n\nhideCartesianGrid\n\nboolean\n\nWhether to hide the cartesian grid lines.\n\n​\n\nhideDateRangeFilter\n\nboolean\n\nWhether the date range filter should be hidden.\n\n​\n\nhideHorizontalCartesianGrid\n\nboolean\n\ndefault:false\n\nWhether to hide the horizontal cartesian grid lines.\n\n​\n\nhideVerticalCartesianGrid\n\nboolean\n\ndefault:true\n\nWhether to hide the vertical cartesian grid lines.\n\n​\n\nhideSubsequentXAxisTicks\n\nboolean\n\ndefault:false\n\nWhether to hide the all but the first of the X-Axis ticks.\n\n​\n\ncartesianGridLineStyle\n\n'solid' | 'dashed'\n\ndefault:\"solid\"\n\nWhether the cartesian grid lines show as dashed or solid.\n\n​\n\ncartesianGridLineColor\n\nstring\n\nThe color of cartesian grid lines.\n\n​\n\ncomparisonLineStyle\n\n'solid' | 'dashed'\n\ndefault:\"solid\"\n\nWhether the comparison range shows as dashed for date comparison line charts \\(as opposed to the default solid line\\).\n\n​\n\nmapColorsToFields\n\n\\(report: QuillReport, theme: QuillTheme\\) => ColorMapType\n\nAn optional function that takes a report and theme and returns a map of keys used in that report to the colors they should use.The color values support RGB hexcodes and CSS color literals.\n\nCopy\n\nAsk AI\n\n    function mapColorsToFields(report, theme): ColorMapType {\n    \treturn {\n    \t\tamount: {\n    \t\t\tprimary: 'red',\n    \t\t\tcomparison: 'gray',\n    \t\t\tprimaryGradientStart: 'red',\n    \t\t\tprimaryGradientStop: 'lightred',\n    \t\t\tcomparisonGradientStart: '#EFEFEF',\n    \t\t\tcomparisonGradientStop: '#EFEFEF00',\n    \t\t},\n    \t\ttotal: {\n    \t\t\tprimary: 'red'\n    \t\t},\n    \t};\n    }\n\n### \n\n​\n\nColorMapType\n\nShow ColorMapType\n\nCopy\n\nAsk AI\n\n    export type ColorMapType = {\n    \t[field: string]: {\n    \t\tprimary: string;\n    \t\tcomparison?: string;\n    \t\tprimaryGradientStart?: string;\n    \t\tprimaryGradientStop?: string;\n    \t\tcomparisonGradientStart?: string;\n    \t\tcomparisonGradientStop?: string;\n    \t};\n    }\n\n​\n\nclassName\n\nstring\n\nStyles the top-level container of the Chart.This can be useful for TailwindCSS-style classname strings.\n\n​\n\ncontainerStyle\n\nReact.CSSProperties\n\nThe CSS styles that wrap the chart.\n\n[Previous](/docs/react/report-builder)[StaticChartStateless Chart view of a Quill ReportNext](/docs/react/static-chart)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=referral&utm_source=quill)\n\nOn this page\n\n  * Automatically fetch data by id\n  * Props\n  * ColorMapType",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/chart"
    },
    {
      "title": "Vercel Security Checkpoint",
      "content": "Failed to verify your browser\n\n[Website owner? Click here to fix](https://vercel.link/security-checkpoint)\n\nCode 11",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/static-chart"
    }
  ]
}