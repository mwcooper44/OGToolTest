{
  "site": "https://quill.co/blog",
  "items": [
    {
      "title": "Why Users Want Customer-Facing Analytics",
      "content": "Due to low barriers to entry, abundant capital, and tens of thousands of ambitious founders, the SaaS industry has become one of the most competitive markets in the world. As a result, customers‚Äô expectations have risen dramatically.October 1, 2024",
      "content_type": "blog",
      "source_url": "https://quill.co/blog"
    },
    {
      "title": "Brief Overview of the Modern Data Stack",
      "content": "Ok, but what actually is the Modern Data Stack?September 26, 2024",
      "content_type": "blog",
      "source_url": "https://quill.co/blog"
    },
    {
      "title": "The Evolution of Business Intelligence and the Emergence of Embedded BI",
      "content": "For many SaaS product managers, business intelligence (BI) is a familiar tool that has shaped decision-making and product development for decades. But the rise of embedded BI has introduced new possibilities and challenges, especially in the fast-evolving SaaS ecosystem. In this article, we‚Äôll explore the history of traditional BI, its limitations, and how embedded BI emerged as a product category in the 2000s.July 26, 2024Why the Modern Data Stack Doesn‚Äôt Replace Embedded AnalyticsWhile the modern data stack offers robust data capabilities, it also has limitations.July 23, 2024",
      "content_type": "blog",
      "source_url": "https://quill.co/blog"
    },
    {
      "title": "Why SaaS Companies Offer Customer-Facing Analytics",
      "content": "Just like the look & feel of analytics may differ, you‚Äôll hear various explanations for why a specific company wants to offer customer-facing analyticsJuly 12, 2024Don‚Äôt build ChatGPT for X. Focus on where ChatGPT doesn‚Äôt solve XA lot of AI products are essentially ChatGPT for X, but oftentimes ChatGPT is not the ideal user experience for X. Instead of trying to make a better chatbot than OpenAI, focusing on solving X specifically will often lead to a very different UX (not a chat interface).July 5, 2024What is ‚Äúcustomer-facing analytics‚Äù?‚ÄúCustomer-facing analytics‚Äù describes any data or insights feature in your product that your end-users interact with. Customer-facing analytics are ubiquitous across all kinds of software products, whether consumer, B2B, marketplace, data app, or tech-enabled service. Some common examples of customer-facing analytics are charts & graphs, data tables, dashboards, reporting tools, or even self-service analytics.",
      "content_type": "blog",
      "source_url": "https://quill.co/blog"
    },
    {
      "title": "Fullstack API Platform for Dashboards and Reporting",
      "content": "Add to your appThe React Library, API, and Management Toolkit, purpose built for customer-facing reporting and dashboards.The React Library, API, and Management Toolkit,purpose built for customer-facing reporting and dashboards.See See Jan 2024 - Jul 2024Last 90 daysTransactions56,456Revenue$123,456AmountDateMerchantUserCategory$6027 May 2024ChevronJames NewtonFuel$10903 Jun 2024ChevronJuan VillarealFuel$9727 Apr 202476Benjamin JohannsenFuel$6521 May 202476Benjamin JohannsenFuel$9907 May 2024ShellJuan VillarealFuel$12006 May 2024ShellElizabeth NewtonFuelJan 2024 - Jul 2024Last 90 daysTransactions56,456Revenue$123,456AmountDateMerchantUserCategory$6027 May 2024ChevronJames NewtonFuel$10903 Jun 2024ChevronJuan VillarealFuel$9727 Apr 202476Benjamin JohannsenFuel$6521 May 202476Benjamin JohannsenFuel$9907 May 2024ShellJuan VillarealFuel$12006 May 2024ShellElizabeth NewtonFuelModular building blocks for every use caseBuild any reporting workflow, using your own codebase and UI library.YBacked by Y CombinatorHow it works1Connect your database or create an endpointCloudQuill SDKapp.quill.coConnect databaseConnect2Create dashboards in Quillapp.quill.co3Add Quill to your app in a few lines of codeimport { QuillProvider, Dashboard } from \"@quillsql/react\" <QuillProvider> <Dashboard name=\"transactions\" /> </QuillProvider>app.acme.coüöÄ Acme4Push updates without looping in engineersapp.quill.coapp.acme.coüöÄ AcmeHow it works1Connect your database or create an endpointCloudQuill SDKapp.quill.coConnect databaseConnect2Create dashboards in Quillapp.quill.co3Add Quill to your app in a few lines of codeimport { QuillProvider, Dashboard } from \"@quillsql/react\" <QuillProvider> <Dashboard name=\"transactions\" /> </QuillProvider>app.acme.coüöÄ Acme4Push updates without looping in engineersapp.quill.coapp.acme.coüöÄ AcmeOne unified platform. Purpose built for serving your customersPortalapp.quill.coUpdate dashboards without looping in engineers. You can even push reports to specific customers in seconds with multi-tenant access controls.React Library<Dashboard /><Tables />Don‚Äôt compromise on product. Make dashboards and reporting drive in-product actions. Use your existing UI components and theme, in your own codebase.Your CloudServerServer SDKDatabaseSensitive data never leaves your cloud. Use your existing authentication and server. Queries run in your own environment.One unified platform. Purpose built for serving your customersPortalapp.quill.coUpdate dashboards without looping in engineers. You can even push reports to specific customers in seconds with multi-tenant access controls.Don‚Äôt compromise on product. Make dashboards and reporting drive in-product actions. Use your existing UI components and theme, in your own codebase.React Library<Dashboard /><Table />Your CloudServerServer SDKDatabaseSensitive data never leaves your cloud. Use your existing authentication and server. Queries run in your own environment.Build In-Product Dashboards Quickly, Without CompromiseSpend your time on your core product, not building dashboards and reporting from scratch.Book demoSee docsDocsJobsContactBook demoBook demo¬© Quill Technologies, Inc.YBacked by Y Combinator",
      "content_type": "other",
      "source_url": "https://quill.co"
    },
    {
      "title": "Architecture - Quill",
      "content": "Quill home pageSearch...‚åòKArchitectureArchitectureLearn moreQuill home pageSearch...‚åòKSearch...NavigationArchitectureArchitectureArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKTraditionally in Business Intelligence products, there are 2 architectures, each with their own set of problems. ArchitectureDescriptionProblemsCloudA web app that you embed via an iframeLimited customization, security concerns, performance issuesSelf-hostedA docker container or kubernetes cluster hosted on your infrastructureComplex setup, maintenance overhead, still requires iframe embedding By building backend and frontend logic into your existing stack, we solved these problems. ‚ÄãHybrid Production DB connection runs in your cloud. Metadata requests are made to Quill Metadata API. BI Platform is hosted on our cloud. ‚ÄãSelf Hosted Production DB connection and BI Platform run entirely in your cloud. Metadata requests are made to Quill Metadata API. Typical for High Security Industries Like Finance, Healthcare, Government. ‚ÄãCloud DB connection and BI Platform run in our cloud, similar to Other Cloud Developer Products. AssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs"
    },
    {
      "title": "Architecture - Quill",
      "content": "Quill home pageSearch...‚åòKArchitectureArchitectureLearn moreQuill home pageSearch...‚åòKSearch...NavigationArchitectureArchitectureArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKTraditionally in Business Intelligence products, there are 2 architectures, each with their own set of problems. ArchitectureDescriptionProblemsCloudA web app that you embed via an iframeLimited customization, security concerns, performance issuesSelf-hostedA docker container or kubernetes cluster hosted on your infrastructureComplex setup, maintenance overhead, still requires iframe embedding By building backend and frontend logic into your existing stack, we solved these problems. ‚ÄãHybrid Production DB connection runs in your cloud. Metadata requests are made to Quill Metadata API. BI Platform is hosted on our cloud. ‚ÄãSelf Hosted Production DB connection and BI Platform run entirely in your cloud. Metadata requests are made to Quill Metadata API. Typical for High Security Industries Like Finance, Healthcare, Government. ‚ÄãCloud DB connection and BI Platform run in our cloud, similar to Other Cloud Developer Products. AssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/architecture"
    },
    {
      "title": "Overview - Quill",
      "content": "Quill home pageSearch...‚åòKBI PlatformOverviewQuickstartCreate a tenantCreate a virtual tableCreate a dashboardCreate a reportSelf-host the BI PlatformLearn moreQuill home pageSearch...‚åòKSearch...NavigationBI PlatformOverviewArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDK‚Äã1. Environments ‚ÄãWhat is an Environment? An Environment is a single instance of Quill. Each environment has at least one tenant, a virtual schema, and dashboards that belong to it. You can promote changes in one environment to another environment on a report, dashboard, virtual table level. ‚ÄãCommon Example A Development and Production environment. ‚ÄãDevelopment Points to development postgres database Development Environment publicKey is used in your development and staging react apps Development Environment privateKey is used in your development and staging server apps When your server‚Äôs schema changes, you can test those changes on the Development Environment You can promote changes to the Production Environment when they are ready ‚ÄãProduction Points to production postgres database Production environment publicKey is used in your development and staging react apps Production environment privateKey is used in your development and staging server apps ‚Äã2. Tenant ‚ÄãWhat is a Tenant? A tenant is a logical partition of data within a datasource. ‚ÄãTenant Roles Owner: Controls access to data at the virtual table level. Dashboards must only use virtual tables owned by that tenant. Viewer: Can view dashboards if a mapping exists. The mapping is a SQL query that defines which owners a viewer can access. ‚Äã3. Virtual Table ‚ÄãCreating a Virtual Table To create a virtual table: Navigate to the Virtual Schema tab. Click Create Table. ‚ÄãWhat is a Virtual Table? A virtual table is: A SQL query executed on top of your datasource. Designed to enforce tenancy by requiring a tenant foreign key field (called an owner). A mechanism for cleaning and structuring data for reporting purposes. Note: A virtual table can have multiple owners. ‚Äã4. Dashboard ‚ÄãWhat is a Dashboard? A dashboard organizes and presents reports. It includes: Sections: Each section has a name and a list of reports. Global Filters: Apply across all reports in the dashboard. Common filters include date filters and tenant-level fields. A dashboard provides a unified interface to explore tenant-filtered, structured, and visualized data. ‚Äã5. Report ‚ÄãCreating a Report Once you have created at least one virtual table, you can create a report. ‚ÄãWhat is a Report? A report is a SQL query based on the virtual schema. It supports the following views: Chart view Tabular view ‚Äì A formatted output of the SQL query. Pivot (optional) ‚Äì Adds grouping and/or aggregation to the result, useful for visualizations. ‚ÄãReport Features Access Control: Defines which subset of tenants can view the report on their dashboards. Dashboard Filter Field Mappings: Used when a common field appears across multiple tables. Ensures proper linkage to dashboard-level filters. ‚ÄãReport Placement A report can be assigned to only one dashboard. It can be placed in only one section within that dashboard. ‚ÄãPromoting a report You can promote a report from one dashboard to another, in the same environment ‚ÄãSummary The virtual table reporting model consists of: Virtual Tables: SQL-based, tenant-aware cleaned data structures. Reports: Charted and tabular queries built from virtual tables. Tenants: Access control units for data partitioning and security. Dashboards: Grouped reports with global filters and sectioning. This structure ensures multi-tenant, clean, and secure reporting across your datasource.QuickstartGet up and running with Quill in less than a minuteNextOn this page1. EnvironmentsWhat is an Environment?Common ExampleDevelopmentProduction2. TenantWhat is a Tenant?Tenant Roles3. Virtual TableCreating a Virtual TableWhat is a Virtual Table?4. DashboardWhat is a Dashboard?5. ReportCreating a ReportWhat is a Report?Report FeaturesReport PlacementPromoting a reportSummaryAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/bi-platform/overview"
    },
    {
      "title": "Quickstart - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationGetting StartedQuickstartArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDK‚Äã1. Install dependencies Install @quillsql/react using your favorite package manager: npmyarnpnpmbunCopyAsk AInpm install @quillsql/react ‚Äã2. Add QuillProvider You connect Quill to React with the QuillProvider component. Similar to React‚Äôs Context.Provider, QuillProvider wraps your React app and places Quill Client on the context, enabling you to access it from anywhere in your component tree. In App.js, let‚Äôs wrap our React app with an QuillProvider. We suggest putting the QuillProvider somewhere high in your app, above any component that might need to access Quill data. App.jsCopyAsk AIimport { QuillProvider } from \"@quillsql/react\"; import MyApp from \"./MyApp\"; function App() { return ( <QuillProvider tenants={[{ tenantField: \"customer_id\", tenantIds: [2] }]} publicKey=\"6579031b3e41c378aa8180ec\" > <MyApp /> </QuillProvider> ); } ‚Äã3. Add your first component After your QuillProvider is hooked up, you can add Quill Components to your app. Let‚Äôs start with the dashboard we created in the BI Platform Tutorial. You can find the dashboard name in the BI Platform at https://app.quill.co. Underlying queries and charts can be updated via the Quill BI Platform, and the dashboard will render the newest version. App.jsCopyAsk AIimport { QuillProvider, Dashboard } from \"@quillsql/react\"; function MyDashboardPage() { return <Dashboard name=\"Transactions\" />; } Custom ThemesCustomize your dashboard by passing a custom themeNextOn this page1. Install dependencies2. Add QuillProvider3. Add your first componentAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/quickstart"
    },
    {
      "title": "Quickstart - Quill",
      "content": "Quill home pageSearch...‚åòKServer SDKQuickstartLearn moreQuill home pageSearch...‚åòKSearch...NavigationServer SDKQuickstartArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDK‚Äã1. Install the Quill SDK Node.jsPythonGoPHPRubyCopyAsk AInpm install @quillsql/node ‚Äã2. Create a new endpoint Instantiate Quill with your credentials and add the below POST endpoint. This example assumes you have an organization id on the user returned by your auth middleware. Queries will not work properly without the organization id. NodePythonGoPHPRubyCopyAsk AIimport { Quill } from \"@quillsql/node\"; const quill = new Quill({ privateKey: process.env.QULL_PRIVATE_KEY, databaseConnectionString: process.env.POSTGRES_READ, databaseType: \"postgresql\", }); // \"authenticateJWT\" is your own pre-existing auth middleware app.post(\"/quill\", authenticateJWT, async (req, res) => { // assuming user fetched via auth middleware has an userId const { userId } = req.user; const { metadata } = req.body; const result = await quill.query({ tenants: [{ tenantField: \"user_id\", tenantIds: [userId] }] metadata, }); res.send(result); }); ‚Äã3. Connect the frontend You connect Quill to React with the QuillProvider component. Similar to React‚Äôs Context.Provider, QuillProvider wraps your React app and places Quill Client on the context, enabling you to access it from anywhere in your component tree. In App.js, let‚Äôs wrap our React app with an QuillProvider. We suggest putting the QuillProvider somewhere high in your app, above any component that might need to access Quill data. App.jsCopyAsk AIimport { QuillProvider } from \"@quillsql/react\"; import Routes from \"./Routes\"; import UserContext from \"./UserContext\"; function App() { // Use your existing auth and user context const [user] = useContext(UserContext); return ( <QuillProvider publicKey=\"YOUR_PUBLIC_KEY\" queryEndpoint=\"https://yourserver.com/quill\" // your POST endpoint queryHeaders={{ // We'll pass these headers on every request to your endpoint Authorization: `Bearer ${user.jwt}`, }} > <Routes /> </QuillProvider> ); } See the QuillProvider API docs for more information.On this page1. Install the Quill SDK2. Create a new endpoint3. Connect the frontendAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/server/quickstart"
    },
    {
      "title": "Quickstart - Quill",
      "content": "Quill home pageSearch...‚åòKBI PlatformOverviewQuickstartCreate a tenantCreate a virtual tableCreate a dashboardCreate a reportSelf-host the BI PlatformLearn moreQuill home pageSearch...‚åòKSearch...NavigationBI PlatformQuickstartArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDK‚Äã1. Create a read-only user PostgreSQL Big Query Snowflake MySQLTo create a read-only user in PostgreSQL, do the following:1Create a new userPostgreSQLCopyAsk AI-- Replace 'password' with a strong password. CREATE USER quill_read_only WITH PASSWORD 'password'; 2Grant CONNECT privilegesPostgreSQLCopyAsk AI-- Allows the user to connect to the database. GRANT CONNECT ON DATABASE your_database TO quill_read_only; 3Grant USAGE on the schemaPostgreSQLCopyAsk AI-- Allows the user to access the objects within the schema. GRANT USAGE ON SCHEMA your_schema TO quill_read_only; 4Grant SELECT privileges on the schemaPostgreSQLCopyAsk AI-- Allows the user to read data from the tables. GRANT SELECT ON ALL TABLES IN SCHEMA your_schema TO quill_read_only; The connection string for the read-only user we just created will be something like: postgresql://quill_read_only:password@db.example.com:5432/your_database. ‚Äã2. Connect your database Go to https://app.quill.co/onboard and enter the read-only database connection string that we created in the last step. If you‚Äôre using our fully-managed Quill instance, make sure to add the Quill server to your database IP whitelist, if you have one. Requests from Quill will always come from 34.133.137.225. For more information about data and access control, you can read our self-hosting guide here. ‚Äã3. Connect your schema The Quill platform provides powerful filtering and reporting tools to help you get the insights you want, faster. Since Quill provides organization-based filtering out-of-the-box, simply let us know which table to use and Quill will automatically partition your data by organization. ‚Äã4. Add SQL Views Create a cleaned schema that makes it easier to write queries and reports. The views you create here will be used to create charts and tables later on. Don‚Äôt worry, you can always create and edit these views later. ‚ÄãNext Steps Once you have connected your database, you‚Äôre ready to create your first dashboard! Check out our guides on how to create your first dashboard below. Create a dashboardBuild your first dashboard with Quill in less than a minute.PreviousCreate a tenantCreate objects that own dashboards and can view dashboards owned by other tenantsNextOn this page1. Create a read-only user2. Connect your database3. Connect your schema4. Add SQL ViewsNext StepsAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/bi-platform/quickstart"
    },
    {
      "title": "Create a tenant - Quill",
      "content": "Quill home pageSearch...‚åòKBI PlatformOverviewQuickstartCreate a tenantCreate a virtual tableCreate a dashboardCreate a reportSelf-host the BI PlatformLearn moreQuill home pageSearch...‚åòKSearch...NavigationBI PlatformCreate a tenantArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKTenants do two things in the Quill platform. 1. separate data in a dashboard 2. allow certain organizations, users, etc to see specific reports in a dashboard. To learn more about tenancy read more here. Tenants are the core concept for multi-tenancy in Quill. Each tenant represents a separate organization, user, etc. ‚ÄãTenant Configuration ‚Äã1. Name Most commonly the business name. Example: ‚Äúorganization‚Äù ‚Äã2. Division Row (most common) - Each organization will have its own rows in a table via foreign key, organization_id Schema - Each organization has its own schema Database - Each organization has its own database instance ‚Äã3. Roles Owner - Owner is how dashboard data is divided Viewer - Viewer can see some list of dashboards PreviousCreate a virtual tableAdd a virtual table to Quill virtual schemaNextOn this pageTenant Configuration1. Name2. Division3. RolesAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/bi-platform/tenant"
    },
    {
      "title": "Create a virtual table - Quill",
      "content": "Quill home pageSearch...‚åòKBI PlatformOverviewQuickstartCreate a tenantCreate a virtual tableCreate a dashboardCreate a reportSelf-host the BI PlatformLearn moreQuill home pageSearch...‚åòKSearch...NavigationBI PlatformCreate a virtual tableArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKThis guide assumes you have already connected your database with Quill. If you haven‚Äôt done that yet, check out our onboarding guide here. When you first get started with the Quill platform, you only see the initial views you created in the onboarding flow. ‚Äã1. Create a virtual table To add a new SQL virtual table, you can click Add virtual table + to open a SQL Editor that shows the visible tables that Quill can see in your schema. SQL virtual tables can help you organize and group different data together to make it easier to build charts and tables on top of. ‚Äã2. Edit the virtual table and save Go ahead and write some SQL for a new virtual table that you would like to create. Run the query by clicking Run Query and make sure the data looks correct. Give your new virtual table a descriptive, clear name and then hit Create virtual table to add the virtual table to Quill. You can now query data from that virtual table in charts and dashboards. ‚Äã3. Manage your virtual tables If you ever want to edit or delete an existing virtual table, click on the virtual table in the SQL virtual tables list to open the virtual table manager. Be careful when editing and deleting virtual tables! Make sure the charts that reference that virtual table are up to date so they don‚Äôt get out of sync. ‚ÄãNext Steps Now that you have a virtual table, you‚Äôre ready to start using Quill! You can come back at any time and add more dashboards, reports, and virtual tables. Create a dashboardCreate a reportCreate a virtual tablePreviousCreate a dashboardBuild your first dashboard with Quill in less than a minuteNextOn this page1. Create a virtual table2. Edit the virtual table and save3. Manage your virtual tablesNext StepsAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/bi-platform/virtual-table"
    },
    {
      "title": "Create a dashboard - Quill",
      "content": "Quill home pageSearch...‚åòKBI PlatformOverviewQuickstartCreate a tenantCreate a virtual tableCreate a dashboardCreate a reportSelf-host the BI PlatformLearn moreQuill home pageSearch...‚åòKSearch...NavigationBI PlatformCreate a dashboardArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKThis guide assumes you have already connected your database with Quill. If you haven‚Äôt done that yet, check out our onboarding guide here. When you first get started with the Quill platform, you will see an environment without any dashboards. Click on the ‚Äúcreate new dashboard‚Äù button to get started. ‚Äã1. Create a dashboard Let‚Äôs start by giving your new dashboard a name. The dashboard name should be unique, clear, and easy to remember. If you would like to automatically filter every chart in this dashboard by date, you can keep the date filter option selected. Additionally, if you would like to compare this date range against historical ranges (eg. compare ‚ÄúLast 90 days‚Äù against ‚ÄúPrevious 90 days‚Äù) you can select the Date comparison feature. Finally, if you would like to automatically filter every chart in this table by a string field on your schema (eg. filtering by user, merchant, etc.) you can add as many string filters as you would like. Remember, you can always create more than one dashboard. ‚Äã2. Save your dashboard When you‚Äôre done, go ahead and hit save. You should see your dashboard in the top-left of the screen. Since Quill automatically partitions by organization, you can select an organization in the top-right to filter any dashboard by (eg. ‚ÄúAcme‚Äù) or you can select ‚ÄúAll Organizations‚Äù to show all data. ‚Äã3. Manage your dashboards If you ever want to create a new dashboard, click on the dashboard dropdown and select ‚ÄúNew Dashboard‚Äù. You can also edit the settings for any existing dashboard by selecting that dashboard and clicking ‚ÄúManage‚Äù in the dropdown. That will open the Manage Dashboard modal which allows you to edit the title of the dashboard, add and remove filters, edit the order of charts, and delete the dashboard. ‚ÄãNext Steps Now that you‚Äôve created a dashboard, you‚Äôre ready to create your first report! Check out our guides on how to create your first chart below. Create a chartBuild your first dashboard with Quill in less than a minute.PreviousCreate a reportBuild your first report with Quill in less than a minuteNextOn this page1. Create a dashboard2. Save your dashboard3. Manage your dashboardsNext StepsAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/bi-platform/dashboard"
    },
    {
      "title": "Create a report - Quill",
      "content": "Quill home pageSearch...‚åòKBI PlatformOverviewQuickstartCreate a tenantCreate a virtual tableCreate a dashboardCreate a reportSelf-host the BI PlatformLearn moreQuill home pageSearch...‚åòKSearch...NavigationBI PlatformCreate a reportArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKThis guide assumes you have already created a dashboard. If you haven‚Äôt done that yet, check out our guide on how to create your first dashboard here. There are two ways to create a report with Quill, with SQL or without SQL. With SQL (SQLEditor)Create a report with SQLNo Code (ReportBuilder)Create a report from a user interface ‚ÄãWith SQL (SQLEditor) The SQL Editor is a powerful SQL-based code editor that you can use in your product to help your users create and edit their own reports. ‚Äã1. Enter a query or ask AI Use the code editor to enter a SQL query. Alternatively, you can also use the text box to ask AI to write a SQL query for you using your available schemas. When you‚Äôre finished with your query, click Run Query to execute that query against your database. ‚Äã2. Edit your query Take a look at the response table to make sure the data was what you expected. If it isn‚Äôt, you can either manually update the SQL query using the code editor or you can use the text box again to have the AI fix the query. If the query didn‚Äôt work at all, you can also have the AI automatically fix the broken query by clicking Fix with AI: ‚Äã3. Edit the chart Once you are satisfied with your query and the query results, click Add to dashboard in the bottom right to turn the query into a report. Here, you can edit the name of the chart, the dashboard this chart should belong to, the chart type, and much more. For a more detailed guide for each of each option, see Editing a Chart below. ‚ÄãNo Code (ReportBuilder) The Report Builder is an easy-to-use, AI-enabled query creation tool that you can use in your product to allow nontechnical users to create and edit their own reports without knowing SQL. ‚Äã1. Create a report or ask AI To create a report using the ReportBuilder, you can either ask AI to generate a report for you or use the interface on the left sidebar to select columns. ‚Äã2. Edit the report Once you have a report that is populated with data, you can edit the report using AI or the left sidebar. To apply a filter, simply select the column you wish to filter against and then how you would like to filter (the options change based on the type of the column). To apply one- or two-dimensional groupings or aggregations you can add a pivot which will orient your data based on the columns and aggregation type you select. You can sort the data in the report by one or more columns using the sort feature and you can limit the number of rows returned in the report using the limit feature. ‚Äã3. Edit the report Once you are satisfied with your query and the query results, click Add to dashboard in the bottom right to turn the query into a report. Here, you can edit the name of the chart, the dashboard this chart should belong to, the chart type, and much more. For a more detailed guide for each of each option, see Editing a Report below. ‚ÄãEditing a Report Once you have created a query, you can edit the resulting chart before adding it to your dashboard. You can edit the name of the chart, the dashboard this chart should belong to, the chart type, and much more. When used in an embedded flow where the dashboard is known ahead of time, developers can pre-select this dashboard and the option will be hidden in this form. ‚ÄãPivots Editing queries with SQL gives you fine-grain control over your data, but you can also add a pivot to the result of the query to apply extra groupings or breakdowns to get exactly the information you want. ‚ÄãChart Axis You can update the axis information for each chart by selecting which columns to use for each axis, what labels to give those columns (defaults to the name of the column), and the formatting type that should be applied to values for that axis. ‚ÄãTable Info In Quill, every chart is backed by a SQL query. The results of that query are represented as a table which can be useful for reporting or sharing with other teams. Similar to the chart axis you can change the columns, labels, and formatting applied to this table. ‚ÄãDate Field For dashboards with date filters, you can select which date field to use for this query. This column will be used when filtering all charts on that dashboard by a common date filter automatically. ‚ÄãOrganization Access By default, this chart will only be visible for your current organization (in this case, ‚ÄúAcme‚Äù) but you can make this chart visible to all organizations by toggling the organization access toggle. This option can also be disabled. ‚ÄãNext Steps With chart and a dashboard, you‚Äôre ready to start using Quill. If you‚Äôd like, you can also add a new virtual table to give Quill access to even more data for making reports! Create a virtual tableAdd a SQL view with Quill in less than a minute.PreviousSelf-host the BI PlatformSet up the BI Platform in your own react appNextOn this pageWith SQL (SQLEditor)1. Enter a query or ask AI2. Edit your query3. Edit the chartNo Code (ReportBuilder)1. Create a report or ask AI2. Edit the report3. Edit the reportEditing a ReportPivotsChart AxisTable InfoDate FieldOrganization AccessNext StepsAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/bi-platform/report"
    },
    {
      "title": "Self-host the BI Platform - Quill",
      "content": "Quill home pageSearch...‚åòKBI PlatformOverviewQuickstartCreate a tenantCreate a virtual tableCreate a dashboardCreate a reportSelf-host the BI PlatformLearn moreQuill home pageSearch...‚åòKSearch...NavigationBI PlatformSelf-host the BI PlatformArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKIf you want the BI Platform to point to a datasource via the server sdk (instead of Quill Cloud), you can add it to any react app in a few lines of code. ‚Äã1. Install dependencies Install @quillsql/admin using your favorite package manager: npmyarnpnpmbunCopyAsk AInpm install @quillsql/admin ‚Äã2. Add AdminProvider You connect Quill to React with the AdminProvider component. Similar to React‚Äôs Context.Provider, AdminProvider wraps your React app and places Quill on the context, enabling you to access it from anywhere in your component tree. In App.js, let‚Äôs wrap our React app with an AdminProvider. We suggest putting the AdminProvider somewhere high in your app, above any component that might use to access BI Platform components. If you‚Äôre using QuillProvider in the same react app, make sure it is a child of AdminProvider. App.jsCopyAsk AIimport { AdminProvider } from \"@quillsql/admin\"; import { QuillProvider } from \"@quillsql/react\"; import MyApp from \"./MyApp\"; function App() { return ( <AdminProvider queryEndpoint=\"api.youserver.com/quill\" publicKey=\"QUILL_PUBLIC_KEY\" > <QuillProvider queryEndpoint=\"api.youserver.com/quill\" publicKey=\"QUILL_PUBLIC_KEY\" > <MyApp /> </QuillProvider> </AdminProvider> ); } The add two routes in your app, one for each page of the BI Platform. Use your existing navigation system, but here is an example using react router. App.jsCopyAsk AIimport { AdminProvider, VirtualTableManager, DashboardManager, } from \"@quillsql/admin\"; import { QuillProvider } from \"@quillsql/react\"; import { BrowserRouter, Routes, Route, Link, useNavigate, } from \"react-router-dom\"; function App() { return ( <AdminProvider queryEndpoint=\"api.youserver.com/quill\" publicKey=\"QUILL_PUBLIC_KEY\" > <BrowserRouter> <AppContent /> </BrowserRouter> </AdminProvider> ); } function AppContent() { const navigate = useNavigate(); return ( <div> <nav> <Link to=\"/dashboards\">Dashboard Manager</Link> <Link to=\"/virtual-tables\">Virtual Table Manager</Link> </nav> <Routes> <Route path=\"/dashboards\" element={ <DashboardManager navigateToVirtualTableManager={() => navigate(\"/virtual-tables\")} /> } /> <Route path=\"/virtual-tables\" element={ <VirtualTableManager navigateToDashboardManager={() => navigate(\"/dashboards\")} /> } /> </Routes> </div> ); } PreviousCreate a reportBuild your first report with Quill in less than a minuteOn this page1. Install dependencies2. Add AdminProviderAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/bi-platform/self-host"
    },
    {
      "title": "Custom Themes - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationGetting StartedCustom ThemesArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKFor pixel-perfect control over theming and styling, all Quill components accept custom components as props. See our dashboard docs for an example. App.tsxCopyAsk AIimport { QuillProvider } from \"@quillsql/react\"; // You can a custom theme to be applied to the default Quill // components, or you can pass your own components with // pixel-perfect styling. const MY_CUSTOM_THEME = { fontFamily: \"Inter; Helvetica\", backgroundColor: \"#FFFFFF\", primaryTextColor: \"#364153\", secondaryTextColor: \"#6C727F\", chartLabelFontFamily: \"Inter; Helvetica\", chartLabelColor: \"#666666\", chartTickColor: \"#CCCCCC\", chartColors: [\"#4E80EE\", \"#E14F62\", \"#55B5A6\", \"#E9A23B\"], borderColor: \"#E5E7EB\", primaryButtonColor: \"#364153\", secondaryButtonColor: \"#384151\", borderWidth: 1, labelFontWeight: 500, fontSize: 14, loadingStateBackgroundColor: \"#F9F9FA\", hoverBackgroundColor: \"#F4F4F5\", }; function App() { return ( <QuillProvider publicKey={process.env.QUILL_API_KEY} organizationId={user.organizationId} theme={MY_CUSTOM_THEME}> {children} </QuillProvider> ); } ‚ÄãQuillTheme ‚ÄãfontFamilystringrequiredThe font family you want Quill to use. This is usually the same font your app uses. ex: ‚ÄúInter‚Äù ‚ÄãfontSizenumberrequiredThe default font size you want Quill to use. This is usually the same as the fontSize of your app (eg. 16 for ‚Äú16px‚Äù). ‚ÄãbackgroundColorstringrequiredThe background color you want Quill to use. This is usually the same background color your app uses. ex: ‚Äú#FFFFFF‚Äù ‚ÄãhoverBackgroundColorstringrequiredThe background color you want Quill to use while hovering. ‚ÄãprimaryTextColorstringrequiredThe color you want Quill to use for primary text. This is usually the same primary text color color your app uses. ex: ‚Äú#000000‚Äù ‚ÄãsecondaryTextColorstringrequiredThe text color you want Quill to use for secondary text. This is usually the same secondary font color your app uses. ex: ‚Äú#888888‚Äù ‚ÄãchartLabelFontFamilystringrequiredThe font family you want Quill to use for chart labels. This is usually the same as your base font family. ex: ‚ÄúInter‚Äù ‚ÄãchartLabelColorstringrequiredThe text color you want Quill to use for chart labels. This is usually the same as or similar to the secondary color your app uses. ex: ‚Äú#666666‚Äù ‚ÄãchartTickColorstringrequiredThe color you want Quill to use for chart ticks. This is usually the same as or similar to the secondary color your app uses. ex: ‚Äú#CCCCCC‚Äù ‚ÄãchartColorsstring[]requiredThe chart colors you want Quill to use. This is usually the same as the primary and secondary colors your app uses. You can pass in as many colors as you want, and you can also override these by passing in an array for the colors prop in the Chart component. ex: [‚Äò#6269E9‚Äô, ‚Äò#E14F62‚Äô] ‚ÄãborderColorstringrequiredThe border color you want Quill to use. This is usually the same as or similar to the border color your app uses. ex: ‚Äú#CCCCCC‚Äù ‚ÄãborderWidthnumberrequiredThe border width you want Quill to use. This is usually the same as or similar to the border width your app uses. ex: 1 (ie. ‚Äú1px‚Äù) ‚ÄãprimaryButtonColorstringThe color of the primary buttons you want Quill to use. Typically, you can just pass in a custom button with the styling you want instead of using this. ‚ÄãsecondaryButtonColorstringThe color of the secondary buttons you want Quill to use. Typically, you can just pass in a custom button with the styling you want instead of using this. ‚ÄãbuttonFontWeightnumberThe font weight you want Quill to use for buttons. Typically, you can just pass in a custom button with the styling you want instead of using this. (eg. 600) ‚ÄãlabelFontWeightnumberThe font weight you want Quill to use for labels. Typically, you can just pass in a custom label component with the styling you want instead of using this. (eg. 400) ‚ÄãloadingStateBackgroundColorstringThe background color you want Quill to use while in a loading state. This is usually the same as the background color you app uses (eg. ‚Äò#FFFFFF‚Äô).PreviousWhat is Headless UI?NextAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/themes"
    },
    {
      "title": "What is Headless UI? - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationGetting StartedWhat is Headless UI?ArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDK‚ÄúHeadless‚Äù in React refers to a design pattern where UI components are separated into two parts: Logic/State Management - The ‚Äúheadless‚Äù part that handles all the business logic, state, and behavior UI/Presentation - The visual components that you style and customize ‚ÄãHow Headless Components Work Headless components provide all the functionality without any default styling or visual elements. They give you: Data processing State management Business logic But leave the UI completely up to you. The hardest parts of building complex UIs usually revolve around state, events, side-effects, data computation/management. By removing these concerns from the markup, styles and implementation details, our logic and components can be more modular and reusable. ‚Äî TanStack ‚ÄãPopular Libraries that leverage React Hooks TanStack Table (useReactTable) TanStack Query (useQuery) Clerk React SDK (useUser) React Hook Form (useForm) React Window (useVirtualizer) React DnD (useDrag, useDrop) PreviousHeadless dashboardAdd a dashboard to your app, styled with your existing UI components.NextOn this pageHow Headless Components WorkPopular Libraries that leverage React HooksAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/headless"
    },
    {
      "title": "Headless dashboard - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationUse casesHeadless dashboardArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKApp.tsxCopyAsk AIimport { QuillProvider, useDashboard, useDashboardReport, format, } from \"@quillsql/react\"; import { Card, CardHeader } from \"@/components/ui/card\"; import { Skeleton } from \"@/components/ui/skeleton\"; function App() { return ( <QuillProvider tenants={[{ tenantField: \"customer_id\", tenantIds: [2] }]} publicKey=\"6579031b3e41c378aa8180ec\" > <CustomDashboard /> </QuillProvider> ); } function CustomDashboard() { const { sections, isLoading } = useDashboard(\"quill demo dashboard\"); return ( <> <MetricReportsSection reports={sections[\"metrics\"]} /> </> ); } function MetricsSection({ reports }: { reports: any[] }) { return ( <div className=\"grid grid-cols-1 lg:grid-cols-6 gap-6\"> {reports.map((report: any) => ( <MetricCard key={report.id} reportId={report.id} name={report.name} /> ))} </div> ); } interface MetricCardProps { reportId: string; name: string; } export function MetricCard({ reportId, name }: MetricCardProps) { const { report, loading } = useDashboardReport(reportId); if (loading) { return ( <div className=\"lg:col-span-1\"> <Card className=\"h-full shadow-none bg-transparent border-none\"> <CardHeader className=\"pb-4\"> <div className=\"space-y-1\"> <Skeleton className=\"h-10 w-24\" /> <Skeleton className=\"h-4 w-32\" /> <p className=\"text-sm text-muted-foreground\">{name}</p> </div> </CardHeader> </Card> </div> ); } if (!report) return null; const mainValue = format({ value: report.pivotRows?.[0]?.[report.xAxisField], format: report.xAxisFormat, }); return ( <Card className=\"h-full shadow-none bg-transparent border-none\"> <CardHeader className=\"pb-4 bg-transparent\"> <div className=\"space-y-1\"> <h1 className=\"text-4xl font-bold tracking-tight\">{mainValue}</h1> <p className=\"text-sm text-muted-foreground\">{name}</p> </div> </CardHeader> </Card> ); } PreviousHeadless CSV and PDF exportAdd a report detail page to your app with CSV and PDF export, styled with your existing UI components.NextAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/headless-dashboard"
    },
    {
      "title": "Headless CSV and PDF export - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationUse casesHeadless CSV and PDF exportArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKPreviousQuillProviderA context provider that wraps all quill componentsNextAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/headless-data-export"
    },
    {
      "title": "QuillProvider - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationComponentsQuillProviderArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKApp.tsxCopyAsk AIimport { QuillProvider } from \"@quillsql/react\"; function App() { return ( <QuillProvider publicKey={process.env.QUILL_API_KEY} tenants={[user.organizationId]} > {children} </QuillProvider> ); } The quill provider allows all the quill components in your app to share information which lets your dashboards render fast and update dynamically. Similar to React‚Äôs Context.Provider, QuillProvider wraps your React app and places Quill Client on the context, enabling you to access it from anywhere in your component tree. We suggest putting the QuillProvider somewhere high in your app, above any component that might need to access your quill data. ‚ÄãWith OrgId If you‚Äôre using the Quill Cloud, you can pass in your public key and the current organizationId (if any) and the Quill Provider will automatically connect to the hosted Quill Cloud. With OrgIdCopyAsk AI<QuillProvider publicKey={process.env.QUILL_API_KEY} tenants={[user.organizationId]} > {children} </QuillProvider> ‚ÄãWith QueryEndpoint If you‚Äôre self-hosting Quill, you can point the Quill Provider to the location of the server running the Quill SDK. You may also pass a map of query headers that will be forwarded to your server with every request Quill sends. This can be useful if the /quill endpoint is behind a preexisting auth middleware. With QueryEndpointCopyAsk AI<QuillProvider publicKey={process.env.QUILL_API_KEY} queryEndpoint=\"https://yourdomain.com/quill\" queryHeaders={{}} > {children} </QuillProvider> ‚ÄãProps ‚ÄãpublicKeystringrequiredThe public Quill API key. This can be found in the Quill BI Platform by clicking ‚ÄúManage‚Äù on an environment in the environment dropdown -> ‚ÄúCopy public key‚Äù. ‚ÄãenvironmentstringThe environment this app is running in (eg. ‚Äúproduction‚Äù). ‚ÄãtenantsarrayThe tenant ids of the user. Required if not passing a queryEndpoint. If this value is not passed in on the frontend, it should be passed in on the backend if you are using a self-hosted server. ‚ÄãqueryEndpointstringThe url of your self-hosted server running the quill server SDK, if any. ‚ÄãqueryHeadersobjectAdditional query headers passed along with all requests to the custom query endpoint, if any. ‚ÄãwithCredentialsbooleanWhether to include credentials with requests to the query endpoint. ‚ÄãthemeQuillThemeA custom theme used throughout your dashboard. ‚ÄãchildrenReactNodeThe children of the provider. This is usually the rest of your app.PreviousDashboardA list of Quill Reports grouped into Metrics, Charts, and Tables.NextAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/quill-provider"
    },
    {
      "title": "Chart - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationComponentsChartArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKApp.tsxCopyAsk AIimport { QuillProvider, Chart } from \"@quillsql/react\"; const MyChart = () => ( <QuillProvider tenants={{ tenantField: \"customer_id\", tenantIds: [2] }} publicKey=\"6579031b3e41c378aa8180ec\" > <Chart reportId=\"664283fb4db8ad000bfe54d7\" /> </QuillProvider> ); A simple component that displays the given data in one of many chart types. Make sure QuillProvider is a parent of the Chart component. ‚ÄãAutomatically fetch data by id If you know the id of the chart you would like to display, you can pass in the reportId to the Chart component and it will load and display the data for that chart. CopyAsk AIimport { QuillProvider, Chart } from \"@quillsql/react\"; function App() { return ( <QuillProvider tenants={{ tenantField: \"customer_id\", tenantIds: [2] }} publicKey=\"6579031b3e41c378aa8180ec\" > <Chart reportId=\"664283fb4db8ad000bfe54d7\" /> </QuillProvider> ); } ‚ÄãProps ‚ÄãreportIdstringThe chart id. The most usage is through a detail page built to navigate from the dashboard - using the onClick callback to get the reportId, and navigating to a route (say, reports/:id) where the url param is passed in as the reportId. For a standalone table, you can find the reportId in the Quill BI Platform and pass it in directly.When config is passed, the chart will not refetch the given report and will instead simply render the report it was given.A config must be passed if reportId is not present. ‚Äãcolorsstring[]A list of color strings used to color the chart.For example, a pie chart would use the colors for each section and a bar chart would use the colors for each bar. ‚ÄãisAnimationActivebooleanWhether to show animations on render complete. ‚ÄãhideXAxisbooleanWhether to hide the x axis. ‚ÄãhideYAxisbooleanWhether to hide the y axis. ‚ÄãhideCartesianGridbooleanWhether to hide the cartesian grid lines. ‚ÄãhideDateRangeFilterbooleanWhether the date range filter should be hidden. ‚ÄãhideHorizontalCartesianGridbooleandefault:falseWhether to hide the horizontal cartesian grid lines. ‚ÄãhideVerticalCartesianGridbooleandefault:trueWhether to hide the vertical cartesian grid lines. ‚ÄãhideSubsequentXAxisTicksbooleandefault:falseWhether to hide the all but the first of the X-Axis ticks. ‚ÄãcartesianGridLineStyle'solid' | 'dashed'default:\"solid\"Whether the cartesian grid lines show as dashed or solid. ‚ÄãcartesianGridLineColorstringThe color of cartesian grid lines. ‚ÄãcomparisonLineStyle'solid' | 'dashed'default:\"solid\"Whether the comparison range shows as dashed for date comparison line charts (as opposed to the default solid line). ‚ÄãmapColorsToFields(report: QuillReport, theme: QuillTheme) => ColorMapTypeAn optional function that takes a report and theme and returns a map of keys used in that report to the colors they should use.The color values support RGB hexcodes and CSS color literals.CopyAsk AIfunction mapColorsToFields(report, theme): ColorMapType { return { amount: { primary: 'red', comparison: 'gray', primaryGradientStart: 'red', primaryGradientStop: 'lightred', comparisonGradientStart: '#EFEFEF', comparisonGradientStop: '#EFEFEF00', }, total: { primary: 'red' }, }; } ‚ÄãColorMapTypeShow ColorMapTypeCopyAsk AIexport type ColorMapType = { [field: string]: { primary: string; comparison?: string; primaryGradientStart?: string; primaryGradientStop?: string; comparisonGradientStart?: string; comparisonGradientStop?: string; }; } ‚ÄãclassNamestringStyles the top-level container of the Chart.This can be useful for TailwindCSS-style classname strings. ‚ÄãcontainerStyleReact.CSSPropertiesThe CSS styles that wrap the chart.PreviousStaticChartStateless Chart view of a Quill ReportNextOn this pageAutomatically fetch data by idPropsColorMapTypeAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/chart"
    },
    {
      "title": "StaticChart - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationComponentsStaticChartArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKStateless chart component intended for use with useDashboard and useDashboardReport. ‚ÄãreportIdstringrequiredThe unique identifier of the report to display ‚ÄãonClickChartElement(data: any) => voidCallback function triggered when a chart element is clicked ‚ÄãcontainerStyleReact.CSSPropertiesCustom CSS styles to apply to the chart container ‚ÄãshowLegendbooleandefault:\"false\"Whether to display the chart legendPreviousTableThe Tabular view of a Quill ReportNextAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/static-chart"
    },
    {
      "title": "Table - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationComponentsTableArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKApp.tsxCopyAsk AIimport { QuillProvider, Table } from \"@quillsql/react\"; const MyTable = () => ( <QuillProvider organizationId=\"2\" publicKey=\"6579031b3e41c378aa8180ec\"> <Table reportId=\"6644088e6e2470000cbdb109\" /> </QuillProvider> ); A simple component that displays the given data as a table. Make sure QuillProvider is a parent of the Table component. ‚ÄãExamples Ant Design Material DesignCopyAsk AIimport { Table, useQuill } from \"@quillsql/react\"; import { AntTable } from \"./ui/ant/Table\"; export function AntDesignTable() { const report = useQuill(\"6644088e6e2470000cbdb109\"); if (!report || !report.data) return null; return <AntTable rows={report.data.rows} columns={report.data.columns} />; } ‚ÄãAutomatically fetch data by id If you know the id of the table you would like to display, you can pass in the reportId to the Table component and it will load and display the data for that table. CopyAsk AIimport { QuillProvider, Table } from \"@quillsql/react\"; function App() { return ( <QuillProvider organizationId=\"2\" publicKey=\"6579031b3e41c378aa8180ec\"> <Table reportId=\"664283fb4db8ad000bfe54d7\" /> </QuillProvider> ); } ‚ÄãPass data directly into the table Alternatively, if you have the actual data you would like to display (eg. you fetched the data using our useQuill hook) you can also pass in that data directly to the Table component and it will display that data without doing any async fetching. Using raw dataUsing useQuillCopyAsk AIimport { QuillProvider, Table } from \"@quillsql/react\"; function App() { return ( <QuillProvider organizationId=\"2\" publicKey=\"6579031b3e41c378aa8180ec\"> <Table rows={[ { x: 1, y: 1, z: 0 }, { x: 2, y: 2, z: 0 }, { x: 3, y: 3, z: 0 }, { x: 4, y: 4, z: 0 }, { x: 5, y: 5, z: 0 }, { x: 6, y: 6, z: 0 }, ]} columns={[ { label: \"My X-Axis\", field: \"x\" }, { label: \"My Y-Axis\", field: \"y\" }, ]} /> </QuillProvider> ); } ‚ÄãProps ‚ÄãreportIdstringThe table‚Äôs id. The most usage is through a detail page built to navigate from the dashboard - using the onClick callback to get the report id, and navigating to a route (say, reports/:id) where the url param is passed in as the reportId. For a standalone table, you can find the reportId in the Quill BI Platform and pass it in directly.When a reportId is passed, the table will first fetch the data necessary to render this table, and then it will render the rows and columns that it receives from the server.A reportId must be passed if rows and columns are not present. ‚Äãrows{ [key: string]: any }[]The rows of the table to show, if any.When rows and columns are passed, the table will not refetch the given report and will instead simply render the rows and columns it was given.Both rows and columns must be passed if reportId is not present. ‚Äãcolumns{ label: string; field: string; }[]The columns of the table to show, if any.When rows and columns are passed, the table will not refetch the given report and will instead simply render the rows and columns it was given.Both rows and columns must be passed if reportId is not present. ‚ÄãcsvFilenamestringThe placeholder filename to use when downloading this table as a csv file. ‚ÄãhideDownloadCSVButtonbooleanWhether to hide the download csv button. ‚ÄãisLoadingbooleanWhether this table component is loading. ‚ÄãdownloadCSV() => voidA callback that is fired when the user clicks download csv. ‚ÄãLoadingComponent() => JSX.ElementA loading component to show when the table is loading. ‚ÄãclassNamestringStyles the top-level container of the Table.This can be useful for TailwindCSS-style classname strings. ‚ÄãcontainerStyleReact.CSSPropertiesThe CSS styles that wrap the table.PreviousSQLEditorA UI component for creating and editing Quill Reports with SQLNextOn this pageExamplesAutomatically fetch data by idPass data directly into the tablePropsAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/table"
    },
    {
      "title": "useDashboard - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationHooksuseDashboardArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKUsed alongside useDashboardReport for fully customizable dashboards. Below is an example with shadcn showing fully custom styling. App.tsxCopyAsk AIimport { QuillProvider, useDashboard, useDashboardReport, format, } from \"@quillsql/react\"; import { Card, CardHeader } from \"@/components/ui/card\"; import { Skeleton } from \"@/components/ui/skeleton\"; function App() { return ( <QuillProvider tenants={[{ tenantField: \"customer_id\", tenantIds: [2] }]} publicKey=\"6579031b3e41c378aa8180ec\" > <CustomDashboard /> </QuillProvider> ); } function CustomDashboard() { const { sections, isLoading } = useDashboard(\"quill demo dashboard\"); return ( <> <MetricReportsSection reports={sections[\"metrics\"]} /> </> ); } function MetricsSection({ reports }: { reports: any[] }) { return ( <div className=\"grid grid-cols-1 lg:grid-cols-6 gap-6\"> {reports.map((report: any) => ( <MetricCard key={report.id} reportId={report.id} name={report.name} /> ))} </div> ); } interface MetricCardProps { reportId: string; name: string; } export function MetricCard({ reportId, name }: MetricCardProps) { const { report, loading } = useDashboardReport(reportId); if (loading) { return ( <div className=\"lg:col-span-1\"> <Card className=\"h-full shadow-none bg-transparent border-none\"> <CardHeader className=\"pb-4\"> <div className=\"space-y-1\"> <Skeleton className=\"h-10 w-24\" /> <Skeleton className=\"h-4 w-32\" /> <p className=\"text-sm text-muted-foreground\">{name}</p> </div> </CardHeader> </Card> </div> ); } if (!report) return null; const mainValue = format({ value: report.pivotRows?.[0]?.[report.xAxisField], format: report.xAxisFormat, }); return ( <Card className=\"h-full shadow-none bg-transparent border-none\"> <CardHeader className=\"pb-4 bg-transparent\"> <div className=\"space-y-1\"> <h1 className=\"text-4xl font-bold tracking-tight\">{mainValue}</h1> <p className=\"text-sm text-muted-foreground\">{name}</p> </div> </CardHeader> </Card> ); } Parameters ‚ÄãdashboardNamestringrequiredThe name of the dashboard to load ‚ÄãconfigobjectConfiguration options for the dashboardShow config properties‚ÄãpageSizenumberdefault:10The number of rows per page for the tabular rows of a report. Defaults to 10. Returns ‚ÄãisLoadingbooleanWhether the dashboard data is currently loading ‚ÄãsectionsRecord<string, QuillReport[]> | nullThe dashboard sections containing reports, organized by section nameShow properties‚ÄãidstringrequiredThe report‚Äôs unique id‚ÄãnamestringrequiredThe name of the report‚ÄãdashboardNamestringrequiredThe name of the dashboard this report belongs to‚Äãrows{ [key: string]: string }[]requiredThe rows of data returned from this report‚Äôs query‚ÄãcolumnsColumn[]requiredThe columns data returned from this report‚Äôs query‚ÄãchartTypestringrequiredThe type of this chart‚ÄãdateField{ table: string; field: string }The table and field this report uses for date filtering, if any‚ÄãpivotPivot | nullrequiredThe pivot used in this query, if any‚ÄãxAxisLabelstringrequiredThe label of the xAxis‚ÄãxAxisFieldstringrequiredThe field to use for this report‚Äôs xAxis‚ÄãxAxisFormatAxisFormatrequiredThe format for this report‚Äôs xAxis‚ÄãtemplatebooleanThe template flag for a report‚ÄãyAxisFields{ field: string; label: string; format: AxisFormat }[]requiredA list of metadata about the yAxes of this report‚ÄãordernumberrequiredThe relative ordering of this report in relation to its siblings. Ordering starts at 1 and counts up (eg. 1, 2, 3, etc.). Reports in the same section are first grouped by chartType and then each group is sorted by order.‚ÄãcompareRows{ [key: string]: string }[]requiredThe rows of data returned from this report‚Äôs query over the comparison date range as opposed to the primary date range‚ÄãfiltersAppliedInternalFilter[]An array filters that have been applied to this query‚ÄãpaginationPaginationA page prop used for smart table pagination‚Äãsort{ field: string; direction: string }A sort prop used for smart table pagination‚ÄãrowCountnumberrequiredA total row count used for SQL pagination‚ÄãqueryStringstringrequiredA query for the report used by the report builder on initial load of report‚ÄãfilterMap{ [key: string]: { table: string; field: string } }A map of dashboard filters to the appropriate table and field for the report‚ÄãreferenceLines{ label: string; query: [number, number] | string }[]A list of reference lines to render on compatible charts‚ÄãreferenceLineYValues{ label: string; query: [number, number] }[]Resolved reference line y values‚ÄãincludeCustomFieldsbooleanA flag to determine whether to automatically display custom fields‚ÄãcolumnsWithCustomFieldsColumn[]Columns with custom fields‚ÄãpivotRows{ [key: string]: string }[]The pivot row info‚ÄãpivotColumnsColumnInternal[]A list of metadata about the pivot yAxes of this report‚ÄãpivotRowCountnumberTotal pivot row count ‚ÄãfiltersDashboardFilter[]Available filters for the dashboard. These are typically rendered with html select or similar UI components. ‚ÄãapplyFilters(filters: Array<{ label: string; value: string | string[] | { startDate?: Date; endDate?: Date }; } | Filter>) => voidFunction to apply filters to the dashboardPrevioususeDashboardReportAdd a dashboard to your app, styled with your existing UI components.NextAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/use-dashboard"
    },
    {
      "title": "useDashboardReport - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationHooksuseDashboardReportArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKUsed alongside useDashboard for fully customizable dashboards. This hook exists to abstract report specific logic to report specific components and to allow parallel fetching of queries in a dashboard. Below is an example with shadcn showing fully custom styling. App.tsxCopyAsk AIimport { QuillProvider, useDashboard, useDashboardReport, format, } from \"@quillsql/react\"; import { Card, CardHeader } from \"@/components/ui/card\"; import { Skeleton } from \"@/components/ui/skeleton\"; function App() { return ( <QuillProvider tenants={[{ tenantField: \"customer_id\", tenantIds: [2] }]} publicKey=\"6579031b3e41c378aa8180ec\" > <CustomDashboard /> </QuillProvider> ); } function CustomDashboard() { const { sections, isLoading } = useDashboard(\"quill demo dashboard\"); return ( <> <MetricReportsSection reports={sections[\"metrics\"]} /> </> ); } function MetricsSection({ reports }: { reports: any[] }) { return ( <div className=\"grid grid-cols-1 lg:grid-cols-6 gap-6\"> {reports.map((report: any) => ( <MetricCard key={report.id} reportId={report.id} name={report.name} /> ))} </div> ); } interface MetricCardProps { reportId: string; name: string; } export function MetricCard({ reportId, name }: MetricCardProps) { const { report, loading } = useDashboardReport(reportId); if (loading) { return ( <div className=\"lg:col-span-1\"> <Card className=\"h-full shadow-none bg-transparent border-none\"> <CardHeader className=\"pb-4\"> <div className=\"space-y-1\"> <Skeleton className=\"h-10 w-24\" /> <Skeleton className=\"h-4 w-32\" /> <p className=\"text-sm text-muted-foreground\">{name}</p> </div> </CardHeader> </Card> </div> ); } if (!report) return null; const mainValue = format({ value: report.pivotRows?.[0]?.[report.xAxisField], format: report.xAxisFormat, }); return ( <Card className=\"h-full shadow-none bg-transparent border-none\"> <CardHeader className=\"pb-4 bg-transparent\"> <div className=\"space-y-1\"> <h1 className=\"text-4xl font-bold tracking-tight\">{mainValue}</h1> <p className=\"text-sm text-muted-foreground\">{name}</p> </div> </CardHeader> </Card> ); } Parameters ‚ÄãreportIdstringrequiredThe Quill reportId of the report to load Returns ‚ÄãreportQuillReport | nullThe report data returned by useDashboardReport.Show QuillReport type‚ÄãidstringrequiredThe report‚Äôs unique id.‚ÄãnamestringrequiredThe name of the report.‚ÄãdashboardNamestringrequiredThe name of the dashboard this report belongs to.‚Äãrows{ [key: string]: string }[]requiredThe rows of data returned from this report‚Äôs query.‚ÄãcolumnsColumn[]requiredThe columns data returned from this report‚Äôs query.‚ÄãchartTypestringrequiredThe type of this chart.‚ÄãxAxisFieldstringrequiredThe field to use for this report‚Äôs xAxis.‚ÄãxAxisFormatAxisFormatrequiredThe format for this report‚Äôs xAxis. ‚ÄãisLoadingbooleanWhether the report data is currently loading ‚ÄãapplyFilters(filters: Filter[]) => voidFunction to apply filters to the report. ‚ÄãdeleteReport() => voidFunction to delete the report. ‚ÄãfetchNextPage() => Promise<void>Function to fetch the next page of data. Note that the pageSize is set in useDashboard.PrevioususeDashboardsGet a list of all Quill dashboards.NextAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/use-dashboard-report"
    },
    {
      "title": "useDashboards - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationHooksuseDashboardsArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKCopyAsk AIimport { useDashboards } from \"@quillsql/react\"; export const DashboardList = () => { const { dashboards, isLoading } = useDashboards(); return ( <div> {isLoading ? ( <div>Loading...</div> ) : ( dashboards.map((dashboard) => ( <div key={dashboard.id}> <div>{dashboard.name}</div> </div> )) )} </div> ); }; Can be used alongside useDashboard for a fully dynamic directory of dashboards. CopyAsk AIimport { useDashboards, useDashboard, useDashboardReport, StaticChart, } from \"@quillsql/react\"; import { Card } from \"@/components/ui/card\"; import { Skeleton } from \"@/components/ui/skeleton\"; export const DashboardList = () => { const { dashboards, isLoading } = useDashboards(); return ( <div> {isLoading ? ( <div>Loading...</div> ) : ( dashboards.map((dashboard) => ( <div key={dashboard.id}> <CustomDashboard name={dashboard.name} /> </div> )) )} </div> ); }; function CustomDashboard({ name }) { const { sections, isLoading } = useDashboard(name); if (isLoading) return <div>Loading...</div>; return ( <> {Object.entries(sections).map(([sectionName, reports]) => ( <ReportsSection key={sectionName} sectionName={sectionName} reports={reports} /> ))} </> ); } function ReportsSection({ sectionName, reports, }: { sectionName: string; reports: any[]; }) { return ( <div> <h2>{sectionName}</h2> <div className=\"grid grid-cols-1 lg:grid-cols-6 gap-6\"> {reports.map((report: any) => ( <MetricCard key={report.id} reportId={report.id} name={report.name} /> ))} </div> </div> ); } interface ReportCardProps { reportId: string; name: string; } export function ReportCard({ reportId, name }: ReportCardProps) { const { report, loading } = useDashboardReport(reportId); if (loading) { return ( <Card className=\"h-full shadow-none bg-transparent border-none\"> <Skeleton /> </Card> ); } return ( <Card className=\"h-full shadow-none bg-transparent border-none\"> <StaticChart reportId={reportId} /> </Card> ); } Returns ‚ÄãdashboardsDashboard[] | nullThe list of dashboards returned by useDashboards.Show Dashboard type‚ÄãidstringrequiredThe unique dashboard ID.‚ÄãnamestringrequiredThe dashboard name. ‚ÄãisLoadingbooleanWhether the dashboards are currently loading.PrevioususeQuillA pragmatic data API for your dataNextAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/use-dashboards"
    },
    {
      "title": "useExport - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationHooksuseExportArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKApp.tsxCopyAsk AIimport { QuillProvider, useExport } from \"@quillsql/react\"; function CustomComponent() { // pass in any report created in the Quill BI Platform const { downloadCSV } = useExport(QUILL_ID); return <button onClick={downloadCSV}>Save</button>; } function App() { return ( <QuillProvider tenants={[{ tenantField: \"customer_id\", tenantIds: [2] }]} publicKey={process.env.QUILL_API_KEY} > <CustomComponent /> </QuillProvider> ); } Make sure QuillProvider is a parent of the component using the useExport hook. ‚ÄãreportIdstringrequiredThe id of the report you created in the Quill BI Platform.Don‚Äôt have an id yet? Learn how to create a report in the Quill BI Platform to get started.PreviousformatA simple way to format data from QuillNextAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/use-export"
    },
    {
      "title": "format - Quill",
      "content": "Quill home pageSearch...‚åòKGetting StartedQuickstartCustom ThemesWhat is Headless UI?Use casesHeadless dashboardHeadless CSV and PDF exportComponentsQuillProviderDashboardReportBuilderChartStaticChartTableSQLEditorHooksuseDashboarduseDashboardReportuseDashboardsuseQuilluseExportFunctionsformatLearn moreQuill home pageSearch...‚åòKSearch...NavigationFunctionsformatArchitectureBI PlatformReact SDKServer SDKArchitectureBI PlatformReact SDKServer SDKApp.tsxCopyAsk AIimport { format } from \"@quillsql/react\"; function formatExample() { format(123.45, \"dollar_cents\"); // \"$123.45\" format(123, \"dollar_cents\"); // \"$123.00\" } ‚ÄãvaluestringrequiredThe value of the thing being formatted. ‚Äãformat'percent' | 'dollar_amount' | 'dollar_cents' | 'whole_number' | 'one_decimal_place' | 'two_decimal_places' | 'string' | 'yyyy' | 'MMM_yyyy' | 'MMM_dd_yyyy' | 'MMM_dd' | 'hh_ap_pm' | 'MMM_dd-MMM_dd' | 'MMM_dd_hh:mm_ap_pm' | 'wo, yyyy'requiredThe Quill format type of how you want to format the value.PrevioususeExportA simple way to export data from QuillAssistantResponses are generated using AI and may contain mistakes.",
      "content_type": "other",
      "source_url": "https://quill.co/docs/react/format"
    }
  ]
}